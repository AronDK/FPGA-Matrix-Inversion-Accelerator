// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="inverse,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.770286,HLS_SYN_LAT=14498,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=4,HLS_SYN_FF=1034,HLS_SYN_LUT=1921,HLS_VERSION=2020_1}" *)

module inverse (
        ap_clk,
        ap_rst_n,
        inStream_TDATA,
        inStream_TVALID,
        inStream_TREADY,
        inStream_TLAST,
        outStream_TDATA,
        outStream_TVALID,
        outStream_TREADY,
        outStream_TLAST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 75'd1;
parameter    ap_ST_fsm_state2 = 75'd2;
parameter    ap_ST_fsm_state3 = 75'd4;
parameter    ap_ST_fsm_state4 = 75'd8;
parameter    ap_ST_fsm_state5 = 75'd16;
parameter    ap_ST_fsm_state6 = 75'd32;
parameter    ap_ST_fsm_state7 = 75'd64;
parameter    ap_ST_fsm_state8 = 75'd128;
parameter    ap_ST_fsm_state9 = 75'd256;
parameter    ap_ST_fsm_state10 = 75'd512;
parameter    ap_ST_fsm_state11 = 75'd1024;
parameter    ap_ST_fsm_state12 = 75'd2048;
parameter    ap_ST_fsm_state13 = 75'd4096;
parameter    ap_ST_fsm_state14 = 75'd8192;
parameter    ap_ST_fsm_state15 = 75'd16384;
parameter    ap_ST_fsm_state16 = 75'd32768;
parameter    ap_ST_fsm_state17 = 75'd65536;
parameter    ap_ST_fsm_state18 = 75'd131072;
parameter    ap_ST_fsm_state19 = 75'd262144;
parameter    ap_ST_fsm_state20 = 75'd524288;
parameter    ap_ST_fsm_state21 = 75'd1048576;
parameter    ap_ST_fsm_state22 = 75'd2097152;
parameter    ap_ST_fsm_state23 = 75'd4194304;
parameter    ap_ST_fsm_state24 = 75'd8388608;
parameter    ap_ST_fsm_state25 = 75'd16777216;
parameter    ap_ST_fsm_state26 = 75'd33554432;
parameter    ap_ST_fsm_state27 = 75'd67108864;
parameter    ap_ST_fsm_state28 = 75'd134217728;
parameter    ap_ST_fsm_state29 = 75'd268435456;
parameter    ap_ST_fsm_state30 = 75'd536870912;
parameter    ap_ST_fsm_state31 = 75'd1073741824;
parameter    ap_ST_fsm_state32 = 75'd2147483648;
parameter    ap_ST_fsm_state33 = 75'd4294967296;
parameter    ap_ST_fsm_state34 = 75'd8589934592;
parameter    ap_ST_fsm_state35 = 75'd17179869184;
parameter    ap_ST_fsm_state36 = 75'd34359738368;
parameter    ap_ST_fsm_state37 = 75'd68719476736;
parameter    ap_ST_fsm_state38 = 75'd137438953472;
parameter    ap_ST_fsm_state39 = 75'd274877906944;
parameter    ap_ST_fsm_state40 = 75'd549755813888;
parameter    ap_ST_fsm_state41 = 75'd1099511627776;
parameter    ap_ST_fsm_state42 = 75'd2199023255552;
parameter    ap_ST_fsm_state43 = 75'd4398046511104;
parameter    ap_ST_fsm_state44 = 75'd8796093022208;
parameter    ap_ST_fsm_state45 = 75'd17592186044416;
parameter    ap_ST_fsm_state46 = 75'd35184372088832;
parameter    ap_ST_fsm_state47 = 75'd70368744177664;
parameter    ap_ST_fsm_state48 = 75'd140737488355328;
parameter    ap_ST_fsm_state49 = 75'd281474976710656;
parameter    ap_ST_fsm_state50 = 75'd562949953421312;
parameter    ap_ST_fsm_state51 = 75'd1125899906842624;
parameter    ap_ST_fsm_state52 = 75'd2251799813685248;
parameter    ap_ST_fsm_state53 = 75'd4503599627370496;
parameter    ap_ST_fsm_state54 = 75'd9007199254740992;
parameter    ap_ST_fsm_state55 = 75'd18014398509481984;
parameter    ap_ST_fsm_state56 = 75'd36028797018963968;
parameter    ap_ST_fsm_state57 = 75'd72057594037927936;
parameter    ap_ST_fsm_state58 = 75'd144115188075855872;
parameter    ap_ST_fsm_state59 = 75'd288230376151711744;
parameter    ap_ST_fsm_state60 = 75'd576460752303423488;
parameter    ap_ST_fsm_state61 = 75'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 75'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 75'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 75'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 75'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 75'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 75'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 75'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 75'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 75'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 75'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 75'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 75'd4722366482869645213696;
parameter    ap_ST_fsm_pp1_stage0 = 75'd9444732965739290427392;
parameter    ap_ST_fsm_state77 = 75'd18889465931478580854784;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] inStream_TDATA;
input   inStream_TVALID;
output   inStream_TREADY;
input  [0:0] inStream_TLAST;
output  [31:0] outStream_TDATA;
output   outStream_TVALID;
input   outStream_TREADY;
output  [0:0] outStream_TLAST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg inStream_TREADY;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [74:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg    inStream_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln56_fu_430_p2;
reg    outStream_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln118_reg_1375;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] icmp_ln118_reg_1375_pp1_iter1_reg;
reg   [6:0] indvar_flatten11_reg_397;
reg   [3:0] row8_0_reg_408;
reg   [3:0] col9_0_reg_419;
wire   [6:0] add_ln56_fu_436_p2;
reg    ap_block_state2;
wire   [3:0] select_ln61_1_fu_462_p3;
wire   [3:0] col_fu_520_p2;
wire   [3:0] i_fu_532_p2;
reg   [3:0] i_reg_1209;
wire    ap_CS_fsm_state4;
wire   [7:0] add_ln77_fu_562_p2;
reg   [7:0] add_ln77_reg_1214;
wire   [0:0] icmp_ln74_fu_526_p2;
wire   [8:0] add_ln203_fu_592_p2;
reg   [8:0] add_ln203_reg_1219;
wire   [3:0] j_fu_604_p2;
reg   [3:0] j_reg_1228;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln76_fu_598_p2;
wire   [4:0] j_6_fu_696_p2;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln80_fu_651_p2;
wire   [3:0] i_4_fu_708_p2;
reg   [3:0] i_4_reg_1249;
wire    ap_CS_fsm_state8;
wire   [8:0] zext_ln203_2_fu_714_p1;
reg   [8:0] zext_ln203_2_reg_1254;
wire   [0:0] icmp_ln87_fu_702_p2;
wire   [8:0] add_ln203_1_fu_742_p2;
reg   [8:0] add_ln203_1_reg_1259;
wire  signed [51:0] sext_ln1148_fu_759_p1;
reg  signed [51:0] sext_ln1148_reg_1270;
wire    ap_CS_fsm_state9;
wire   [4:0] j_5_fu_769_p2;
reg   [4:0] j_5_reg_1278;
wire    ap_CS_fsm_state10;
reg   [7:0] aug_V_addr_2_reg_1283;
wire   [0:0] icmp_ln92_fu_763_p2;
wire    ap_CS_fsm_state11;
wire   [3:0] j_8_fu_813_p2;
reg   [3:0] j_8_reg_1296;
wire    ap_CS_fsm_state67;
wire   [0:0] icmp_ln98_fu_819_p2;
reg   [0:0] icmp_ln98_reg_1301;
wire   [0:0] icmp_ln97_fu_807_p2;
wire   [8:0] add_ln203_11_fu_849_p2;
reg   [8:0] add_ln203_11_reg_1305;
wire  signed [51:0] sext_ln1193_fu_865_p1;
reg  signed [51:0] sext_ln1193_reg_1315;
wire    ap_CS_fsm_state68;
wire   [4:0] k_fu_875_p2;
reg   [4:0] k_reg_1323;
wire    ap_CS_fsm_state69;
wire   [0:0] icmp_ln100_fu_869_p2;
reg   [7:0] aug_V_addr_7_reg_1333;
wire   [0:0] icmp_ln109_fu_939_p2;
wire    ap_CS_fsm_state71;
wire   [3:0] i_3_fu_945_p2;
reg   [3:0] i_3_reg_1342;
wire   [7:0] add_ln203_4_fu_975_p2;
reg   [7:0] add_ln203_4_reg_1347;
wire   [8:0] add_ln203_5_fu_1005_p2;
reg   [8:0] add_ln203_5_reg_1352;
wire   [3:0] j_7_fu_1021_p2;
reg   [3:0] j_7_reg_1360;
wire    ap_CS_fsm_state72;
wire   [7:0] add_ln203_9_fu_1031_p2;
reg   [7:0] add_ln203_9_reg_1365;
wire   [0:0] icmp_ln111_fu_1015_p2;
wire   [0:0] icmp_ln118_fu_1060_p2;
wire    ap_block_state74_pp1_stage0_iter0;
wire    ap_block_state75_pp1_stage0_iter1;
reg    ap_block_state75_io;
wire    ap_block_state76_pp1_stage0_iter2;
reg    ap_block_state76_io;
reg    ap_block_pp1_stage0_11001;
wire   [6:0] add_ln118_fu_1066_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [3:0] select_ln122_1_fu_1092_p3;
reg   [3:0] select_ln122_1_reg_1384;
wire   [0:0] tmp_last_V_fu_1171_p2;
reg   [0:0] tmp_last_V_reg_1394;
wire   [3:0] col_1_fu_1177_p2;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state74;
reg   [6:0] A_address0;
reg    A_ce0;
reg    A_we0;
wire   [31:0] A_q0;
reg   [6:0] B_V_address0;
reg    B_V_ce0;
reg    B_V_we0;
wire   [29:0] B_V_q0;
reg   [7:0] aug_V_address0;
reg    aug_V_ce0;
reg    aug_V_we0;
reg   [29:0] aug_V_d0;
wire   [29:0] aug_V_q0;
reg   [7:0] aug_V_address1;
reg    aug_V_ce1;
reg    aug_V_we1;
wire   [29:0] aug_V_d1;
wire   [29:0] aug_V_q1;
reg   [6:0] indvar_flatten_reg_262;
reg   [3:0] row_0_reg_273;
reg   [3:0] col_0_reg_284;
reg   [3:0] i_0_reg_295;
wire    ap_CS_fsm_state3;
reg   [3:0] j_0_reg_307;
wire    ap_CS_fsm_state6;
reg   [4:0] j_1_reg_319;
reg   [3:0] i_1_reg_330;
reg   [4:0] j_2_reg_342;
wire    ap_CS_fsm_state66;
reg   [3:0] j_3_reg_353;
reg   [4:0] k_0_reg_364;
wire    ap_CS_fsm_state70;
reg   [3:0] i_2_reg_375;
reg   [3:0] j_4_reg_386;
wire    ap_CS_fsm_state73;
reg   [3:0] ap_phi_mux_row8_0_phi_fu_412_p4;
wire   [63:0] zext_ln61_3_fu_515_p1;
wire   [63:0] zext_ln77_4_fu_619_p1;
wire   [63:0] zext_ln203_6_fu_633_p1;
wire   [63:0] zext_ln203_12_fu_666_p1;
wire   [63:0] zext_ln203_5_fu_754_p1;
wire   [63:0] zext_ln1265_1_fu_784_p1;
wire   [63:0] zext_ln203_23_fu_860_p1;
wire   [63:0] zext_ln1116_1_fu_890_p1;
wire   [63:0] zext_ln1265_2_fu_900_p1;
wire   [63:0] zext_ln203_20_fu_1051_p1;
wire   [63:0] zext_ln203_18_fu_1056_p1;
wire   [63:0] zext_ln203_16_fu_1160_p1;
wire    ap_block_pp1_stage0_01001;
wire   [29:0] shl_ln_fu_642_p3;
wire   [29:0] select_ln81_fu_687_p3;
wire   [29:0] trunc_ln703_fu_802_p1;
wire   [0:0] icmp_ln58_fu_448_p2;
wire   [3:0] row_fu_442_p2;
wire   [6:0] tmp_fu_470_p3;
wire   [4:0] tmp_5_fu_482_p3;
wire   [7:0] zext_ln61_1_fu_490_p1;
wire   [7:0] zext_ln61_fu_478_p1;
wire   [3:0] select_ln61_fu_454_p3;
wire   [7:0] add_ln61_fu_494_p2;
wire   [7:0] zext_ln61_2_fu_505_p1;
wire   [7:0] add_ln61_1_fu_509_p2;
wire   [6:0] tmp_8_fu_538_p3;
wire   [4:0] tmp_9_fu_550_p3;
wire   [7:0] zext_ln77_1_fu_558_p1;
wire   [7:0] zext_ln77_fu_546_p1;
wire   [7:0] tmp_s_fu_568_p3;
wire   [5:0] tmp_6_fu_580_p3;
wire   [8:0] zext_ln203_1_fu_588_p1;
wire   [8:0] zext_ln203_fu_576_p1;
wire   [7:0] zext_ln77_3_fu_610_p1;
wire   [7:0] add_ln77_1_fu_614_p2;
wire   [8:0] zext_ln77_2_fu_624_p1;
wire   [8:0] add_ln203_3_fu_628_p2;
wire   [7:0] trunc_ln731_fu_638_p1;
wire   [8:0] zext_ln203_11_fu_657_p1;
wire   [8:0] add_ln203_6_fu_661_p2;
wire   [3:0] trunc_ln81_fu_671_p1;
wire   [3:0] add_ln81_fu_675_p2;
wire   [0:0] icmp_ln81_fu_681_p2;
wire   [7:0] tmp_10_fu_718_p3;
wire   [5:0] tmp_11_fu_730_p3;
wire   [8:0] zext_ln203_4_fu_738_p1;
wire   [8:0] zext_ln203_3_fu_726_p1;
wire   [8:0] add_ln203_2_fu_748_p2;
wire   [8:0] zext_ln1265_fu_775_p1;
wire   [8:0] add_ln1265_fu_779_p2;
wire   [51:0] grp_fu_797_p0;
wire  signed [29:0] grp_fu_797_p1;
wire   [29:0] grp_fu_797_p2;
wire   [7:0] tmp_18_fu_825_p3;
wire   [5:0] tmp_19_fu_837_p3;
wire   [8:0] zext_ln203_22_fu_845_p1;
wire   [8:0] zext_ln203_21_fu_833_p1;
wire   [8:0] add_ln203_12_fu_855_p2;
wire   [8:0] zext_ln1116_fu_881_p1;
wire   [8:0] add_ln1116_fu_885_p2;
wire   [8:0] add_ln1265_1_fu_895_p2;
wire  signed [29:0] sext_ln1193_1_fu_905_p0;
wire  signed [29:0] mul_ln1193_fu_909_p0;
wire  signed [29:0] mul_ln1193_fu_909_p1;
wire   [51:0] lhs_V_fu_914_p3;
wire   [51:0] mul_ln1193_fu_909_p2;
wire   [51:0] ret_V_fu_922_p2;
wire   [6:0] tmp_12_fu_951_p3;
wire   [4:0] tmp_13_fu_963_p3;
wire   [7:0] zext_ln203_8_fu_971_p1;
wire   [7:0] zext_ln203_7_fu_959_p1;
wire   [7:0] tmp_14_fu_981_p3;
wire   [5:0] tmp_15_fu_993_p3;
wire   [8:0] zext_ln203_10_fu_1001_p1;
wire   [8:0] zext_ln203_9_fu_989_p1;
wire   [7:0] zext_ln203_17_fu_1027_p1;
wire   [4:0] zext_ln111_fu_1011_p1;
wire   [4:0] add_ln112_fu_1036_p2;
wire   [8:0] zext_ln203_19_fu_1042_p1;
wire   [8:0] add_ln203_10_fu_1046_p2;
wire   [0:0] icmp_ln120_fu_1078_p2;
wire   [3:0] row_1_fu_1072_p2;
wire   [6:0] tmp_16_fu_1100_p3;
wire   [4:0] tmp_17_fu_1112_p3;
wire   [7:0] zext_ln203_14_fu_1120_p1;
wire   [7:0] zext_ln203_13_fu_1108_p1;
wire   [0:0] icmp_ln123_fu_1130_p2;
wire   [0:0] icmp_ln123_2_fu_1136_p2;
wire   [3:0] select_ln122_fu_1084_p3;
wire   [7:0] add_ln203_7_fu_1124_p2;
wire   [7:0] zext_ln203_15_fu_1150_p1;
wire   [7:0] add_ln203_8_fu_1154_p2;
wire   [0:0] select_ln122_2_fu_1142_p3;
wire   [0:0] icmp_ln123_1_fu_1165_p2;
reg    grp_fu_797_ap_start;
wire    grp_fu_797_ap_done;
wire    ap_CS_fsm_state77;
wire    regslice_both_outStream_V_data_V_U_apdone_blk;
reg   [74:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    regslice_both_inStream_V_data_U_apdone_blk;
wire   [31:0] inStream_TDATA_int;
wire    inStream_TVALID_int;
reg    inStream_TREADY_int;
wire    regslice_both_inStream_V_data_U_ack_in;
wire    regslice_both_inStream_V_last_V_U_apdone_blk;
wire   [0:0] inStream_TLAST_int;
wire    regslice_both_inStream_V_last_V_U_vld_out;
wire    regslice_both_inStream_V_last_V_U_ack_in;
wire   [31:0] outStream_TDATA_int;
reg    outStream_TVALID_int;
wire    outStream_TREADY_int;
wire    regslice_both_outStream_V_data_V_U_vld_out;
wire    regslice_both_outStream_V_last_V_U_apdone_blk;
wire    regslice_both_outStream_V_last_V_U_ack_in_dummy;
wire    regslice_both_outStream_V_last_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 75'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

inverse_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
inverse_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

inverse_A #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
A_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(A_address0),
    .ce0(A_ce0),
    .we0(A_we0),
    .d0(inStream_TDATA_int),
    .q0(A_q0)
);

inverse_B_V #(
    .DataWidth( 30 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
B_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(B_V_address0),
    .ce0(B_V_ce0),
    .we0(B_V_we0),
    .d0(aug_V_q1),
    .q0(B_V_q0)
);

inverse_aug_V #(
    .DataWidth( 30 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
aug_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(aug_V_address0),
    .ce0(aug_V_ce0),
    .we0(aug_V_we0),
    .d0(aug_V_d0),
    .q0(aug_V_q0),
    .address1(aug_V_address1),
    .ce1(aug_V_ce1),
    .we1(aug_V_we1),
    .d1(aug_V_d1),
    .q1(aug_V_q1)
);

inverse_sdiv_52nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 56 ),
    .din0_WIDTH( 52 ),
    .din1_WIDTH( 30 ),
    .dout_WIDTH( 30 ))
inverse_sdiv_52nsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_797_ap_start),
    .done(grp_fu_797_ap_done),
    .din0(grp_fu_797_p0),
    .din1(grp_fu_797_p1),
    .ce(1'b1),
    .dout(grp_fu_797_p2)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_inStream_V_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(inStream_TDATA),
    .vld_in(inStream_TVALID),
    .ack_in(regslice_both_inStream_V_data_U_ack_in),
    .data_out(inStream_TDATA_int),
    .vld_out(inStream_TVALID_int),
    .ack_out(inStream_TREADY_int),
    .apdone_blk(regslice_both_inStream_V_data_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_inStream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(inStream_TLAST),
    .vld_in(inStream_TVALID),
    .ack_in(regslice_both_inStream_V_last_V_U_ack_in),
    .data_out(inStream_TLAST_int),
    .vld_out(regslice_both_inStream_V_last_V_U_vld_out),
    .ack_out(inStream_TREADY_int),
    .apdone_blk(regslice_both_inStream_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_outStream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(outStream_TDATA_int),
    .vld_in(outStream_TVALID_int),
    .ack_in(outStream_TREADY_int),
    .data_out(outStream_TDATA),
    .vld_out(regslice_both_outStream_V_data_V_U_vld_out),
    .ack_out(outStream_TREADY),
    .apdone_blk(regslice_both_outStream_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_outStream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_last_V_reg_1394),
    .vld_in(outStream_TVALID_int),
    .ack_in(regslice_both_outStream_V_last_V_U_ack_in_dummy),
    .data_out(outStream_TLAST),
    .vld_out(regslice_both_outStream_V_last_V_U_vld_out),
    .ack_out(outStream_TREADY),
    .apdone_blk(regslice_both_outStream_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state74) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln109_fu_939_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state74)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state74);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((icmp_ln109_fu_939_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln109_fu_939_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
        col9_0_reg_419 <= 4'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln118_fu_1060_p2 == 1'd0))) begin
        col9_0_reg_419 <= col_1_fu_1177_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((inStream_TVALID_int == 1'b0) & (icmp_ln56_fu_430_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln56_fu_430_p2 == 1'd0))) begin
        col_0_reg_284 <= col_fu_520_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        col_0_reg_284 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_295 <= 4'd0;
    end else if (((icmp_ln80_fu_651_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_0_reg_295 <= i_reg_1209;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_fu_526_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_1_reg_330 <= 4'd0;
    end else if (((icmp_ln97_fu_807_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state67))) begin
        i_1_reg_330 <= i_4_reg_1249;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln87_fu_702_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        i_2_reg_375 <= 4'd0;
    end else if (((icmp_ln111_fu_1015_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state72))) begin
        i_2_reg_375 <= i_3_reg_1342;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln109_fu_939_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
        indvar_flatten11_reg_397 <= 7'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln118_fu_1060_p2 == 1'd0))) begin
        indvar_flatten11_reg_397 <= add_ln118_fu_1066_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((inStream_TVALID_int == 1'b0) & (icmp_ln56_fu_430_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln56_fu_430_p2 == 1'd0))) begin
        indvar_flatten_reg_262 <= add_ln56_fu_436_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_262 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_0_reg_307 <= j_reg_1228;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln74_fu_526_p2 == 1'd0))) begin
        j_0_reg_307 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln76_fu_598_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        j_1_reg_319 <= 5'd10;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln80_fu_651_p2 == 1'd0))) begin
        j_1_reg_319 <= j_6_fu_696_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        j_2_reg_342 <= j_5_reg_1278;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        j_2_reg_342 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_fu_763_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        j_3_reg_353 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state69) & ((icmp_ln100_fu_869_p2 == 1'd1) | (icmp_ln98_reg_1301 == 1'd1)))) begin
        j_3_reg_353 <= j_8_reg_1296;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        j_4_reg_386 <= j_7_reg_1360;
    end else if (((1'b1 == ap_CS_fsm_state71) & (icmp_ln109_fu_939_p2 == 1'd0))) begin
        j_4_reg_386 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        k_0_reg_364 <= k_reg_1323;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        k_0_reg_364 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln109_fu_939_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
        row8_0_reg_408 <= 4'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln118_reg_1375 == 1'd0))) begin
        row8_0_reg_408 <= select_ln122_1_reg_1384;
    end
end

always @ (posedge ap_clk) begin
    if ((~((inStream_TVALID_int == 1'b0) & (icmp_ln56_fu_430_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln56_fu_430_p2 == 1'd0))) begin
        row_0_reg_273 <= select_ln61_1_fu_462_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        row_0_reg_273 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state67) & (icmp_ln97_fu_807_p2 == 1'd0) & (icmp_ln98_fu_819_p2 == 1'd0))) begin
        add_ln203_11_reg_1305[8 : 2] <= add_ln203_11_fu_849_p2[8 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln87_fu_702_p2 == 1'd0))) begin
        add_ln203_1_reg_1259[8 : 2] <= add_ln203_1_fu_742_p2[8 : 2];
        zext_ln203_2_reg_1254[3 : 0] <= zext_ln203_2_fu_714_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state71) & (icmp_ln109_fu_939_p2 == 1'd0))) begin
        add_ln203_4_reg_1347[7 : 1] <= add_ln203_4_fu_975_p2[7 : 1];
        add_ln203_5_reg_1352[8 : 2] <= add_ln203_5_fu_1005_p2[8 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state72) & (icmp_ln111_fu_1015_p2 == 1'd0))) begin
        add_ln203_9_reg_1365 <= add_ln203_9_fu_1031_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln74_fu_526_p2 == 1'd0))) begin
        add_ln203_reg_1219[8 : 2] <= add_ln203_fu_592_p2[8 : 2];
        add_ln77_reg_1214[7 : 1] <= add_ln77_fu_562_p2[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln92_fu_763_p2 == 1'd0))) begin
        aug_V_addr_2_reg_1283 <= zext_ln1265_1_fu_784_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state69) & (icmp_ln100_fu_869_p2 == 1'd0) & (icmp_ln98_reg_1301 == 1'd0))) begin
        aug_V_addr_7_reg_1333 <= zext_ln1265_2_fu_900_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        i_3_reg_1342 <= i_3_fu_945_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_4_reg_1249 <= i_4_fu_708_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_1209 <= i_fu_532_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln118_reg_1375 <= icmp_ln118_fu_1060_p2;
        icmp_ln118_reg_1375_pp1_iter1_reg <= icmp_ln118_reg_1375;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state67) & (icmp_ln97_fu_807_p2 == 1'd0))) begin
        icmp_ln98_reg_1301 <= icmp_ln98_fu_819_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        j_5_reg_1278 <= j_5_fu_769_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        j_7_reg_1360 <= j_7_fu_1021_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        j_8_reg_1296 <= j_8_fu_813_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_1228 <= j_fu_604_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state69) & (icmp_ln98_reg_1301 == 1'd0))) begin
        k_reg_1323 <= k_fu_875_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln118_fu_1060_p2 == 1'd0))) begin
        select_ln122_1_reg_1384 <= select_ln122_1_fu_1092_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sext_ln1148_reg_1270 <= sext_ln1148_fu_759_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        sext_ln1193_reg_1315 <= sext_ln1193_fu_865_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln118_fu_1060_p2 == 1'd0))) begin
        tmp_last_V_reg_1394 <= tmp_last_V_fu_1171_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        A_address0 = zext_ln77_4_fu_619_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        A_address0 = zext_ln61_3_fu_515_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (~((inStream_TVALID_int == 1'b0) & (icmp_ln56_fu_430_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((inStream_TVALID_int == 1'b0) & (icmp_ln56_fu_430_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln56_fu_430_p2 == 1'd0))) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        B_V_address0 = zext_ln203_16_fu_1160_p1;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        B_V_address0 = zext_ln203_18_fu_1056_p1;
    end else begin
        B_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        B_V_ce0 = 1'b1;
    end else begin
        B_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        B_V_we0 = 1'b1;
    end else begin
        B_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln118_fu_1060_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state74 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state74 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) & (regslice_both_outStream_V_data_V_U_apdone_blk == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0) & (icmp_ln118_reg_1375 == 1'd0))) begin
        ap_phi_mux_row8_0_phi_fu_412_p4 = select_ln122_1_reg_1384;
    end else begin
        ap_phi_mux_row8_0_phi_fu_412_p4 = row8_0_reg_408;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) & (regslice_both_outStream_V_data_V_U_apdone_blk == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        aug_V_address0 = zext_ln1116_1_fu_890_p1;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        aug_V_address0 = zext_ln203_23_fu_860_p1;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        aug_V_address0 = aug_V_addr_2_reg_1283;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        aug_V_address0 = zext_ln1265_1_fu_784_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        aug_V_address0 = zext_ln203_5_fu_754_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        aug_V_address0 = zext_ln203_12_fu_666_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        aug_V_address0 = zext_ln203_6_fu_633_p1;
    end else begin
        aug_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        aug_V_address1 = zext_ln203_20_fu_1051_p1;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        aug_V_address1 = aug_V_addr_7_reg_1333;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        aug_V_address1 = zext_ln1265_2_fu_900_p1;
    end else begin
        aug_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        aug_V_ce0 = 1'b1;
    end else begin
        aug_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state69))) begin
        aug_V_ce1 = 1'b1;
    end else begin
        aug_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        aug_V_d0 = trunc_ln703_fu_802_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        aug_V_d0 = select_ln81_fu_687_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        aug_V_d0 = shl_ln_fu_642_p3;
    end else begin
        aug_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln80_fu_651_p2 == 1'd0)))) begin
        aug_V_we0 = 1'b1;
    end else begin
        aug_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        aug_V_we1 = 1'b1;
    end else begin
        aug_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_797_ap_start = 1'b1;
    end else begin
        grp_fu_797_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln56_fu_430_p2 == 1'd0))) begin
        inStream_TDATA_blk_n = inStream_TVALID_int;
    end else begin
        inStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((inStream_TVALID == 1'b1) & (regslice_both_inStream_V_data_U_ack_in == 1'b1))) begin
        inStream_TREADY = 1'b1;
    end else begin
        inStream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((inStream_TVALID_int == 1'b0) & (icmp_ln56_fu_430_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln56_fu_430_p2 == 1'd0))) begin
        inStream_TREADY_int = 1'b1;
    end else begin
        inStream_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (icmp_ln118_reg_1375_pp1_iter1_reg == 1'd0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0) & (icmp_ln118_reg_1375 == 1'd0)))) begin
        outStream_TDATA_blk_n = outStream_TREADY_int;
    end else begin
        outStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln118_reg_1375 == 1'd0))) begin
        outStream_TVALID_int = 1'b1;
    end else begin
        outStream_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((inStream_TVALID_int == 1'b0) & (icmp_ln56_fu_430_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln56_fu_430_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((inStream_TVALID_int == 1'b0) & (icmp_ln56_fu_430_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln56_fu_430_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln74_fu_526_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln76_fu_598_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln80_fu_651_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln87_fu_702_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln92_fu_763_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state67 : begin
            if (((icmp_ln97_fu_807_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state67))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if (((icmp_ln98_fu_819_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state67) & (icmp_ln97_fu_807_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            if (((1'b1 == ap_CS_fsm_state69) & ((icmp_ln100_fu_869_p2 == 1'd1) | (icmp_ln98_reg_1301 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state71 : begin
            if (((icmp_ln109_fu_939_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state72 : begin
            if (((icmp_ln111_fu_1015_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state72))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln118_fu_1060_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln118_fu_1060_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state77 : begin
            if (((1'b1 == ap_CS_fsm_state77) & (regslice_both_outStream_V_data_V_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1116_fu_885_p2 = (zext_ln1116_fu_881_p1 + add_ln203_1_reg_1259);

assign add_ln112_fu_1036_p2 = (zext_ln111_fu_1011_p1 + 5'd10);

assign add_ln118_fu_1066_p2 = (indvar_flatten11_reg_397 + 7'd1);

assign add_ln1265_1_fu_895_p2 = (zext_ln1116_fu_881_p1 + add_ln203_11_reg_1305);

assign add_ln1265_fu_779_p2 = (add_ln203_1_reg_1259 + zext_ln1265_fu_775_p1);

assign add_ln203_10_fu_1046_p2 = (add_ln203_5_reg_1352 + zext_ln203_19_fu_1042_p1);

assign add_ln203_11_fu_849_p2 = (zext_ln203_22_fu_845_p1 + zext_ln203_21_fu_833_p1);

assign add_ln203_12_fu_855_p2 = (add_ln203_11_fu_849_p2 + zext_ln203_2_reg_1254);

assign add_ln203_1_fu_742_p2 = (zext_ln203_4_fu_738_p1 + zext_ln203_3_fu_726_p1);

assign add_ln203_2_fu_748_p2 = (add_ln203_1_fu_742_p2 + zext_ln203_2_fu_714_p1);

assign add_ln203_3_fu_628_p2 = (zext_ln77_2_fu_624_p1 + add_ln203_reg_1219);

assign add_ln203_4_fu_975_p2 = (zext_ln203_8_fu_971_p1 + zext_ln203_7_fu_959_p1);

assign add_ln203_5_fu_1005_p2 = (zext_ln203_10_fu_1001_p1 + zext_ln203_9_fu_989_p1);

assign add_ln203_6_fu_661_p2 = (zext_ln203_11_fu_657_p1 + add_ln203_reg_1219);

assign add_ln203_7_fu_1124_p2 = (zext_ln203_14_fu_1120_p1 + zext_ln203_13_fu_1108_p1);

assign add_ln203_8_fu_1154_p2 = (add_ln203_7_fu_1124_p2 + zext_ln203_15_fu_1150_p1);

assign add_ln203_9_fu_1031_p2 = (add_ln203_4_reg_1347 + zext_ln203_17_fu_1027_p1);

assign add_ln203_fu_592_p2 = (zext_ln203_1_fu_588_p1 + zext_ln203_fu_576_p1);

assign add_ln56_fu_436_p2 = (indvar_flatten_reg_262 + 7'd1);

assign add_ln61_1_fu_509_p2 = (add_ln61_fu_494_p2 + zext_ln61_2_fu_505_p1);

assign add_ln61_fu_494_p2 = (zext_ln61_1_fu_490_p1 + zext_ln61_fu_478_p1);

assign add_ln77_1_fu_614_p2 = (zext_ln77_3_fu_610_p1 + add_ln77_reg_1214);

assign add_ln77_fu_562_p2 = (zext_ln77_1_fu_558_p1 + zext_ln77_fu_546_p1);

assign add_ln81_fu_675_p2 = (trunc_ln81_fu_671_p1 + 4'd6);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state76_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state75_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state76_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state75_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state2 = ((inStream_TVALID_int == 1'b0) & (icmp_ln56_fu_430_p2 == 1'd0));
end

assign ap_block_state74_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state75_io = ((outStream_TREADY_int == 1'b0) & (icmp_ln118_reg_1375 == 1'd0));
end

assign ap_block_state75_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state76_io = ((outStream_TREADY_int == 1'b0) & (icmp_ln118_reg_1375_pp1_iter1_reg == 1'd0));
end

assign ap_block_state76_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign aug_V_d1 = {{ret_V_fu_922_p2[51:22]}};

assign col_1_fu_1177_p2 = (select_ln122_fu_1084_p3 + 4'd1);

assign col_fu_520_p2 = (select_ln61_fu_454_p3 + 4'd1);

assign grp_fu_797_p0 = {{aug_V_q0}, {22'd0}};

assign grp_fu_797_p1 = sext_ln1148_reg_1270;

assign i_3_fu_945_p2 = (i_2_reg_375 + 4'd1);

assign i_4_fu_708_p2 = (i_1_reg_330 + 4'd1);

assign i_fu_532_p2 = (i_0_reg_295 + 4'd1);

assign icmp_ln100_fu_869_p2 = ((k_0_reg_364 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln109_fu_939_p2 = ((i_2_reg_375 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln111_fu_1015_p2 = ((j_4_reg_386 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln118_fu_1060_p2 = ((indvar_flatten11_reg_397 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln120_fu_1078_p2 = ((col9_0_reg_419 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln123_1_fu_1165_p2 = ((select_ln122_fu_1084_p3 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln123_2_fu_1136_p2 = ((ap_phi_mux_row8_0_phi_fu_412_p4 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln123_fu_1130_p2 = ((row_1_fu_1072_p2 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_430_p2 = ((indvar_flatten_reg_262 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_448_p2 = ((col_0_reg_284 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_526_p2 = ((i_0_reg_295 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_598_p2 = ((j_0_reg_307 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_651_p2 = ((j_1_reg_319 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln81_fu_681_p2 = ((i_0_reg_295 == add_ln81_fu_675_p2) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_702_p2 = ((i_1_reg_330 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_763_p2 = ((j_2_reg_342 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln97_fu_807_p2 = ((j_3_reg_353 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_819_p2 = ((i_1_reg_330 == j_3_reg_353) ? 1'b1 : 1'b0);

assign j_5_fu_769_p2 = (j_2_reg_342 + 5'd1);

assign j_6_fu_696_p2 = (j_1_reg_319 + 5'd1);

assign j_7_fu_1021_p2 = (j_4_reg_386 + 4'd1);

assign j_8_fu_813_p2 = (j_3_reg_353 + 4'd1);

assign j_fu_604_p2 = (j_0_reg_307 + 4'd1);

assign k_fu_875_p2 = (k_0_reg_364 + 5'd1);

assign lhs_V_fu_914_p3 = {{aug_V_q1}, {22'd0}};

assign mul_ln1193_fu_909_p0 = sext_ln1193_reg_1315;

assign mul_ln1193_fu_909_p1 = sext_ln1193_1_fu_905_p0;

assign mul_ln1193_fu_909_p2 = ($signed(mul_ln1193_fu_909_p0) * $signed(mul_ln1193_fu_909_p1));

assign outStream_TDATA_int = $signed(B_V_q0);

assign outStream_TVALID = regslice_both_outStream_V_data_V_U_vld_out;

assign ret_V_fu_922_p2 = (lhs_V_fu_914_p3 - mul_ln1193_fu_909_p2);

assign row_1_fu_1072_p2 = (ap_phi_mux_row8_0_phi_fu_412_p4 + 4'd1);

assign row_fu_442_p2 = (row_0_reg_273 + 4'd1);

assign select_ln122_1_fu_1092_p3 = ((icmp_ln120_fu_1078_p2[0:0] === 1'b1) ? row_1_fu_1072_p2 : ap_phi_mux_row8_0_phi_fu_412_p4);

assign select_ln122_2_fu_1142_p3 = ((icmp_ln120_fu_1078_p2[0:0] === 1'b1) ? icmp_ln123_fu_1130_p2 : icmp_ln123_2_fu_1136_p2);

assign select_ln122_fu_1084_p3 = ((icmp_ln120_fu_1078_p2[0:0] === 1'b1) ? 4'd0 : col9_0_reg_419);

assign select_ln61_1_fu_462_p3 = ((icmp_ln58_fu_448_p2[0:0] === 1'b1) ? row_fu_442_p2 : row_0_reg_273);

assign select_ln61_fu_454_p3 = ((icmp_ln58_fu_448_p2[0:0] === 1'b1) ? 4'd0 : col_0_reg_284);

assign select_ln81_fu_687_p3 = ((icmp_ln81_fu_681_p2[0:0] === 1'b1) ? 30'd4194304 : 30'd0);

assign sext_ln1148_fu_759_p1 = $signed(aug_V_q0);

assign sext_ln1193_1_fu_905_p0 = aug_V_q0;

assign sext_ln1193_fu_865_p1 = $signed(aug_V_q0);

assign shl_ln_fu_642_p3 = {{trunc_ln731_fu_638_p1}, {22'd0}};

assign tmp_10_fu_718_p3 = {{i_1_reg_330}, {4'd0}};

assign tmp_11_fu_730_p3 = {{i_1_reg_330}, {2'd0}};

assign tmp_12_fu_951_p3 = {{i_2_reg_375}, {3'd0}};

assign tmp_13_fu_963_p3 = {{i_2_reg_375}, {1'd0}};

assign tmp_14_fu_981_p3 = {{i_2_reg_375}, {4'd0}};

assign tmp_15_fu_993_p3 = {{i_2_reg_375}, {2'd0}};

assign tmp_16_fu_1100_p3 = {{select_ln122_1_fu_1092_p3}, {3'd0}};

assign tmp_17_fu_1112_p3 = {{select_ln122_1_fu_1092_p3}, {1'd0}};

assign tmp_18_fu_825_p3 = {{j_3_reg_353}, {4'd0}};

assign tmp_19_fu_837_p3 = {{j_3_reg_353}, {2'd0}};

assign tmp_5_fu_482_p3 = {{select_ln61_1_fu_462_p3}, {1'd0}};

assign tmp_6_fu_580_p3 = {{i_0_reg_295}, {2'd0}};

assign tmp_8_fu_538_p3 = {{i_0_reg_295}, {3'd0}};

assign tmp_9_fu_550_p3 = {{i_0_reg_295}, {1'd0}};

assign tmp_fu_470_p3 = {{select_ln61_1_fu_462_p3}, {3'd0}};

assign tmp_last_V_fu_1171_p2 = (select_ln122_2_fu_1142_p3 & icmp_ln123_1_fu_1165_p2);

assign tmp_s_fu_568_p3 = {{i_0_reg_295}, {4'd0}};

assign trunc_ln703_fu_802_p1 = grp_fu_797_p2[29:0];

assign trunc_ln731_fu_638_p1 = A_q0[7:0];

assign trunc_ln81_fu_671_p1 = j_1_reg_319[3:0];

assign zext_ln1116_1_fu_890_p1 = add_ln1116_fu_885_p2;

assign zext_ln1116_fu_881_p1 = k_0_reg_364;

assign zext_ln111_fu_1011_p1 = j_4_reg_386;

assign zext_ln1265_1_fu_784_p1 = add_ln1265_fu_779_p2;

assign zext_ln1265_2_fu_900_p1 = add_ln1265_1_fu_895_p2;

assign zext_ln1265_fu_775_p1 = j_2_reg_342;

assign zext_ln203_10_fu_1001_p1 = tmp_15_fu_993_p3;

assign zext_ln203_11_fu_657_p1 = j_1_reg_319;

assign zext_ln203_12_fu_666_p1 = add_ln203_6_fu_661_p2;

assign zext_ln203_13_fu_1108_p1 = tmp_16_fu_1100_p3;

assign zext_ln203_14_fu_1120_p1 = tmp_17_fu_1112_p3;

assign zext_ln203_15_fu_1150_p1 = select_ln122_fu_1084_p3;

assign zext_ln203_16_fu_1160_p1 = add_ln203_8_fu_1154_p2;

assign zext_ln203_17_fu_1027_p1 = j_4_reg_386;

assign zext_ln203_18_fu_1056_p1 = add_ln203_9_reg_1365;

assign zext_ln203_19_fu_1042_p1 = add_ln112_fu_1036_p2;

assign zext_ln203_1_fu_588_p1 = tmp_6_fu_580_p3;

assign zext_ln203_20_fu_1051_p1 = add_ln203_10_fu_1046_p2;

assign zext_ln203_21_fu_833_p1 = tmp_18_fu_825_p3;

assign zext_ln203_22_fu_845_p1 = tmp_19_fu_837_p3;

assign zext_ln203_23_fu_860_p1 = add_ln203_12_fu_855_p2;

assign zext_ln203_2_fu_714_p1 = i_1_reg_330;

assign zext_ln203_3_fu_726_p1 = tmp_10_fu_718_p3;

assign zext_ln203_4_fu_738_p1 = tmp_11_fu_730_p3;

assign zext_ln203_5_fu_754_p1 = add_ln203_2_fu_748_p2;

assign zext_ln203_6_fu_633_p1 = add_ln203_3_fu_628_p2;

assign zext_ln203_7_fu_959_p1 = tmp_12_fu_951_p3;

assign zext_ln203_8_fu_971_p1 = tmp_13_fu_963_p3;

assign zext_ln203_9_fu_989_p1 = tmp_14_fu_981_p3;

assign zext_ln203_fu_576_p1 = tmp_s_fu_568_p3;

assign zext_ln61_1_fu_490_p1 = tmp_5_fu_482_p3;

assign zext_ln61_2_fu_505_p1 = select_ln61_fu_454_p3;

assign zext_ln61_3_fu_515_p1 = add_ln61_1_fu_509_p2;

assign zext_ln61_fu_478_p1 = tmp_fu_470_p3;

assign zext_ln77_1_fu_558_p1 = tmp_9_fu_550_p3;

assign zext_ln77_2_fu_624_p1 = j_0_reg_307;

assign zext_ln77_3_fu_610_p1 = j_0_reg_307;

assign zext_ln77_4_fu_619_p1 = add_ln77_1_fu_614_p2;

assign zext_ln77_fu_546_p1 = tmp_8_fu_538_p3;

always @ (posedge ap_clk) begin
    add_ln77_reg_1214[0] <= 1'b0;
    add_ln203_reg_1219[1:0] <= 2'b00;
    zext_ln203_2_reg_1254[8:4] <= 5'b00000;
    add_ln203_1_reg_1259[1:0] <= 2'b00;
    add_ln203_11_reg_1305[1:0] <= 2'b00;
    add_ln203_4_reg_1347[0] <= 1'b0;
    add_ln203_5_reg_1352[1:0] <= 2'b00;
end

endmodule //inverse

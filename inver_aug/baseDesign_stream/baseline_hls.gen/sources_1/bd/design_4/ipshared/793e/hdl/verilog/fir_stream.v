// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_stream,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu5eg-fbvb900-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.221250,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=32,HLS_SYN_FF=1504,HLS_SYN_LUT=2976,HLS_VERSION=2020_1}" *)

module fir_stream (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_TDATA,
        input_r_TVALID,
        input_r_TREADY,
        input_r_TKEEP,
        input_r_TSTRB,
        input_r_TLAST,
        output_r_TDATA,
        output_r_TVALID,
        output_r_TREADY,
        output_r_TKEEP,
        output_r_TSTRB,
        output_r_TLAST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 10;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] input_r_TDATA;
input   input_r_TVALID;
output   input_r_TREADY;
input  [0:0] input_r_TKEEP;
input  [0:0] input_r_TSTRB;
input  [0:0] input_r_TLAST;
output  [15:0] output_r_TDATA;
output   output_r_TVALID;
input   output_r_TREADY;
output  [1:0] output_r_TKEEP;
output  [1:0] output_r_TSTRB;
output  [0:0] output_r_TLAST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_TREADY;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] filter_0_V;
wire  signed [7:0] filter_1_V;
wire   [7:0] filter_2_V;
wire  signed [7:0] filter_3_V;
wire   [7:0] filter_4_V;
wire  signed [7:0] filter_5_V;
wire   [7:0] filter_6_V;
wire  signed [7:0] filter_7_V;
wire   [7:0] filter_8_V;
wire  signed [7:0] filter_9_V;
wire   [7:0] filter_10_V;
wire  signed [7:0] filter_11_V;
wire   [7:0] filter_12_V;
wire  signed [7:0] filter_13_V;
wire   [7:0] filter_14_V;
wire  signed [7:0] filter_15_V;
wire   [7:0] filter_16_V;
wire  signed [7:0] filter_17_V;
wire   [7:0] filter_18_V;
wire  signed [7:0] filter_19_V;
wire   [7:0] filter_20_V;
wire  signed [7:0] filter_21_V;
wire   [7:0] filter_22_V;
wire  signed [7:0] filter_23_V;
wire   [7:0] filter_24_V;
wire  signed [7:0] filter_25_V;
wire   [7:0] filter_26_V;
wire  signed [7:0] filter_27_V;
wire   [7:0] filter_28_V;
wire  signed [7:0] filter_29_V;
wire   [7:0] filter_30_V;
wire  signed [7:0] filter_31_V;
wire   [7:0] filter_32_V;
wire  signed [7:0] filter_33_V;
wire   [7:0] filter_34_V;
wire  signed [7:0] filter_35_V;
wire   [7:0] filter_36_V;
wire  signed [7:0] filter_37_V;
wire   [7:0] filter_38_V;
wire  signed [7:0] filter_39_V;
wire   [7:0] filter_40_V;
wire  signed [7:0] filter_41_V;
wire   [7:0] filter_42_V;
wire  signed [7:0] filter_43_V;
wire   [7:0] filter_44_V;
wire  signed [7:0] filter_45_V;
wire   [7:0] filter_46_V;
wire  signed [7:0] filter_47_V;
wire   [7:0] filter_48_V;
wire  signed [7:0] filter_49_V;
wire   [7:0] filter_50_V;
wire  signed [7:0] filter_51_V;
wire   [7:0] filter_52_V;
wire  signed [7:0] filter_53_V;
wire   [7:0] filter_54_V;
wire  signed [7:0] filter_55_V;
wire   [7:0] filter_56_V;
wire  signed [7:0] filter_57_V;
wire   [7:0] filter_58_V;
wire  signed [7:0] filter_59_V;
wire   [7:0] filter_60_V;
wire  signed [7:0] filter_61_V;
wire   [7:0] filter_62_V;
wire  signed [7:0] filter_63_V;
reg  signed [7:0] signal_V_62;
reg   [7:0] signal_V_61;
reg  signed [7:0] signal_V_60;
reg   [7:0] signal_V_59;
reg  signed [7:0] signal_V_58;
reg   [7:0] signal_V_57;
reg  signed [7:0] signal_V_56;
reg   [7:0] signal_V_55;
reg  signed [7:0] signal_V_54;
reg   [7:0] signal_V_53;
reg  signed [7:0] signal_V_52;
reg   [7:0] signal_V_51;
reg  signed [7:0] signal_V_50;
reg   [7:0] signal_V_49;
reg  signed [7:0] signal_V_48;
reg   [7:0] signal_V_47;
reg  signed [7:0] signal_V_46;
reg   [7:0] signal_V_45;
reg  signed [7:0] signal_V_44;
reg   [7:0] signal_V_43;
reg  signed [7:0] signal_V_42;
reg   [7:0] signal_V_41;
reg  signed [7:0] signal_V_40;
reg   [7:0] signal_V_39;
reg  signed [7:0] signal_V_38;
reg   [7:0] signal_V_37;
reg  signed [7:0] signal_V_36;
reg   [7:0] signal_V_35;
reg  signed [7:0] signal_V_34;
reg   [7:0] signal_V_33;
reg  signed [7:0] signal_V_32;
reg   [7:0] signal_V_31;
reg  signed [7:0] signal_V_30;
reg   [7:0] signal_V_29;
reg  signed [7:0] signal_V_28;
reg   [7:0] signal_V_27;
reg  signed [7:0] signal_V_26;
reg   [7:0] signal_V_25;
reg  signed [7:0] signal_V_24;
reg   [7:0] signal_V_23;
reg  signed [7:0] signal_V_22;
reg   [7:0] signal_V_21;
reg  signed [7:0] signal_V_20;
reg   [7:0] signal_V_19;
reg  signed [7:0] signal_V_18;
reg   [7:0] signal_V_17;
reg  signed [7:0] signal_V_16;
reg   [7:0] signal_V_15;
reg  signed [7:0] signal_V_14;
reg   [7:0] signal_V_13;
reg  signed [7:0] signal_V_12;
reg   [7:0] signal_V_11;
reg  signed [7:0] signal_V_10;
reg   [7:0] signal_V_9;
reg  signed [7:0] signal_V_8;
reg   [7:0] signal_V_7;
reg  signed [7:0] signal_V_6;
reg   [7:0] signal_V_5;
reg  signed [7:0] signal_V_4;
reg   [7:0] signal_V_3;
reg  signed [7:0] signal_V_2;
reg   [7:0] signal_V_1;
reg  signed [7:0] signal_V_0;
reg    input_r_TDATA_blk_n;
reg    output_r_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg   [0:0] tmp_last_V_reg_2496;
reg    ap_block_state1;
wire   [13:0] add_ln700_14_fu_2082_p2;
reg   [13:0] add_ln700_14_reg_2501;
wire   [13:0] add_ln700_29_fu_2116_p2;
reg   [13:0] add_ln700_29_reg_2506;
wire   [13:0] add_ln700_37_fu_2130_p2;
reg   [13:0] add_ln700_37_reg_2511;
wire   [13:0] add_ln700_44_fu_2144_p2;
reg   [13:0] add_ln700_44_reg_2516;
wire   [13:0] add_ln700_60_fu_2178_p2;
reg   [13:0] add_ln700_60_reg_2521;
wire  signed [7:0] sext_ln700_1_fu_1354_p0;
wire  signed [7:0] mul_ln700_fu_1358_p0;
wire  signed [7:0] mul_ln700_fu_1358_p1;
wire  signed [7:0] sext_ln700_66_fu_1376_p0;
wire  signed [7:0] mul_ln700_2_fu_1380_p0;
wire  signed [7:0] mul_ln700_2_fu_1380_p1;
wire  signed [7:0] sext_ln700_68_fu_1398_p0;
wire  signed [7:0] mul_ln700_4_fu_1402_p0;
wire  signed [7:0] mul_ln700_4_fu_1402_p1;
wire  signed [7:0] sext_ln700_70_fu_1420_p0;
wire  signed [7:0] mul_ln700_6_fu_1424_p0;
wire  signed [7:0] mul_ln700_6_fu_1424_p1;
wire  signed [7:0] sext_ln700_72_fu_1442_p0;
wire  signed [7:0] mul_ln700_8_fu_1446_p0;
wire  signed [7:0] mul_ln700_8_fu_1446_p1;
wire  signed [7:0] sext_ln700_74_fu_1464_p0;
wire  signed [7:0] mul_ln700_10_fu_1468_p0;
wire  signed [7:0] mul_ln700_10_fu_1468_p1;
wire  signed [7:0] sext_ln700_76_fu_1486_p0;
wire  signed [7:0] mul_ln700_12_fu_1490_p0;
wire  signed [7:0] mul_ln700_12_fu_1490_p1;
wire  signed [7:0] sext_ln700_78_fu_1508_p0;
wire  signed [7:0] mul_ln700_14_fu_1512_p0;
wire  signed [7:0] mul_ln700_14_fu_1512_p1;
wire  signed [7:0] sext_ln700_80_fu_1530_p0;
wire  signed [7:0] mul_ln700_16_fu_1534_p0;
wire  signed [7:0] mul_ln700_16_fu_1534_p1;
wire  signed [7:0] sext_ln700_82_fu_1552_p0;
wire  signed [7:0] mul_ln700_18_fu_1556_p0;
wire  signed [7:0] mul_ln700_18_fu_1556_p1;
wire  signed [7:0] sext_ln700_84_fu_1574_p0;
wire  signed [7:0] mul_ln700_20_fu_1578_p0;
wire  signed [7:0] mul_ln700_20_fu_1578_p1;
wire  signed [7:0] sext_ln700_86_fu_1596_p0;
wire  signed [7:0] mul_ln700_22_fu_1600_p0;
wire  signed [7:0] mul_ln700_22_fu_1600_p1;
wire  signed [7:0] sext_ln700_88_fu_1618_p0;
wire  signed [7:0] mul_ln700_24_fu_1622_p0;
wire  signed [7:0] mul_ln700_24_fu_1622_p1;
wire  signed [7:0] sext_ln700_90_fu_1640_p0;
wire  signed [7:0] mul_ln700_26_fu_1644_p0;
wire  signed [7:0] mul_ln700_26_fu_1644_p1;
wire  signed [7:0] sext_ln700_92_fu_1662_p0;
wire  signed [7:0] mul_ln700_28_fu_1666_p0;
wire  signed [7:0] mul_ln700_28_fu_1666_p1;
wire  signed [7:0] sext_ln700_94_fu_1684_p0;
wire  signed [7:0] mul_ln700_30_fu_1688_p0;
wire  signed [7:0] mul_ln700_30_fu_1688_p1;
wire  signed [7:0] sext_ln700_96_fu_1706_p0;
wire  signed [7:0] mul_ln700_32_fu_1710_p0;
wire  signed [7:0] mul_ln700_32_fu_1710_p1;
wire  signed [7:0] sext_ln700_98_fu_1728_p0;
wire  signed [7:0] mul_ln700_34_fu_1732_p0;
wire  signed [7:0] mul_ln700_34_fu_1732_p1;
wire  signed [7:0] sext_ln700_100_fu_1750_p0;
wire  signed [7:0] mul_ln700_36_fu_1754_p0;
wire  signed [7:0] mul_ln700_36_fu_1754_p1;
wire  signed [7:0] sext_ln700_102_fu_1772_p0;
wire  signed [7:0] mul_ln700_38_fu_1776_p0;
wire  signed [7:0] mul_ln700_38_fu_1776_p1;
wire  signed [7:0] sext_ln700_104_fu_1794_p0;
wire  signed [7:0] mul_ln700_40_fu_1798_p0;
wire  signed [7:0] mul_ln700_40_fu_1798_p1;
wire  signed [7:0] sext_ln700_106_fu_1816_p0;
wire  signed [7:0] mul_ln700_42_fu_1820_p0;
wire  signed [7:0] mul_ln700_42_fu_1820_p1;
wire  signed [7:0] sext_ln700_108_fu_1838_p0;
wire  signed [7:0] mul_ln700_44_fu_1842_p0;
wire  signed [7:0] mul_ln700_44_fu_1842_p1;
wire  signed [7:0] sext_ln700_110_fu_1860_p0;
wire  signed [7:0] mul_ln700_46_fu_1864_p0;
wire  signed [7:0] mul_ln700_46_fu_1864_p1;
wire  signed [7:0] sext_ln700_112_fu_1882_p0;
wire  signed [7:0] mul_ln700_48_fu_1886_p0;
wire  signed [7:0] mul_ln700_48_fu_1886_p1;
wire  signed [7:0] sext_ln700_114_fu_1904_p0;
wire  signed [7:0] mul_ln700_50_fu_1908_p0;
wire  signed [7:0] mul_ln700_50_fu_1908_p1;
wire  signed [7:0] sext_ln700_116_fu_1926_p0;
wire  signed [7:0] mul_ln700_52_fu_1930_p0;
wire  signed [7:0] mul_ln700_52_fu_1930_p1;
wire  signed [7:0] sext_ln700_118_fu_1948_p0;
wire  signed [7:0] mul_ln700_54_fu_1952_p0;
wire  signed [7:0] mul_ln700_54_fu_1952_p1;
wire  signed [7:0] sext_ln700_120_fu_1970_p0;
wire  signed [7:0] mul_ln700_56_fu_1974_p0;
wire  signed [7:0] mul_ln700_56_fu_1974_p1;
wire  signed [7:0] sext_ln700_122_fu_1992_p0;
wire  signed [7:0] mul_ln700_58_fu_1996_p0;
wire  signed [7:0] mul_ln700_58_fu_1996_p1;
wire  signed [7:0] sext_ln700_124_fu_2014_p0;
wire  signed [7:0] mul_ln700_60_fu_2018_p0;
wire  signed [7:0] mul_ln700_60_fu_2018_p1;
wire  signed [7:0] sext_ln700_126_fu_2036_p0;
wire  signed [7:0] mul_ln700_62_fu_2040_p0;
wire  signed [7:0] mul_ln700_62_fu_2040_p1;
wire  signed [13:0] grp_fu_2217_p3;
wire  signed [13:0] grp_fu_2208_p3;
wire  signed [13:0] grp_fu_2235_p3;
wire  signed [13:0] grp_fu_2226_p3;
(* use_dsp48 = "no" *) wire   [13:0] add_ln700_5_fu_2058_p2;
(* use_dsp48 = "no" *) wire   [13:0] add_ln700_2_fu_2054_p2;
wire  signed [13:0] grp_fu_2253_p3;
wire  signed [13:0] grp_fu_2244_p3;
wire  signed [13:0] grp_fu_2271_p3;
wire  signed [13:0] grp_fu_2262_p3;
(* use_dsp48 = "no" *) wire   [13:0] add_ln700_12_fu_2072_p2;
(* use_dsp48 = "no" *) wire   [13:0] add_ln700_9_fu_2068_p2;
wire   [13:0] add_ln700_13_fu_2076_p2;
wire   [13:0] add_ln700_6_fu_2062_p2;
wire  signed [13:0] grp_fu_2289_p3;
wire  signed [13:0] grp_fu_2280_p3;
wire  signed [13:0] grp_fu_2307_p3;
wire  signed [13:0] grp_fu_2298_p3;
(* use_dsp48 = "no" *) wire   [13:0] add_ln700_20_fu_2092_p2;
(* use_dsp48 = "no" *) wire   [13:0] add_ln700_17_fu_2088_p2;
wire  signed [13:0] grp_fu_2325_p3;
wire  signed [13:0] grp_fu_2316_p3;
wire  signed [13:0] grp_fu_2343_p3;
wire  signed [13:0] grp_fu_2334_p3;
(* use_dsp48 = "no" *) wire   [13:0] add_ln700_27_fu_2106_p2;
(* use_dsp48 = "no" *) wire   [13:0] add_ln700_24_fu_2102_p2;
wire   [13:0] add_ln700_28_fu_2110_p2;
wire   [13:0] add_ln700_21_fu_2096_p2;
wire  signed [13:0] grp_fu_2361_p3;
wire  signed [13:0] grp_fu_2352_p3;
wire  signed [13:0] grp_fu_2379_p3;
wire  signed [13:0] grp_fu_2370_p3;
(* use_dsp48 = "no" *) wire   [13:0] add_ln700_36_fu_2126_p2;
(* use_dsp48 = "no" *) wire   [13:0] add_ln700_33_fu_2122_p2;
wire  signed [13:0] grp_fu_2397_p3;
wire  signed [13:0] grp_fu_2388_p3;
wire  signed [13:0] grp_fu_2415_p3;
wire  signed [13:0] grp_fu_2406_p3;
(* use_dsp48 = "no" *) wire   [13:0] add_ln700_43_fu_2140_p2;
(* use_dsp48 = "no" *) wire   [13:0] add_ln700_40_fu_2136_p2;
wire  signed [13:0] grp_fu_2433_p3;
wire  signed [13:0] grp_fu_2424_p3;
wire  signed [13:0] grp_fu_2451_p3;
wire  signed [13:0] grp_fu_2442_p3;
(* use_dsp48 = "no" *) wire   [13:0] add_ln700_51_fu_2154_p2;
(* use_dsp48 = "no" *) wire   [13:0] add_ln700_48_fu_2150_p2;
wire  signed [13:0] grp_fu_2469_p3;
wire  signed [13:0] grp_fu_2460_p3;
wire  signed [13:0] grp_fu_2487_p3;
wire  signed [13:0] grp_fu_2478_p3;
(* use_dsp48 = "no" *) wire   [13:0] add_ln700_58_fu_2168_p2;
(* use_dsp48 = "no" *) wire   [13:0] add_ln700_55_fu_2164_p2;
wire   [13:0] add_ln700_59_fu_2172_p2;
wire   [13:0] add_ln700_52_fu_2158_p2;
wire   [13:0] add_ln700_45_fu_2188_p2;
wire   [13:0] add_ln700_61_fu_2192_p2;
wire   [13:0] add_ln700_30_fu_2184_p2;
wire   [13:0] tmp_data_V_1_fu_2197_p2;
wire   [13:0] grp_fu_2208_p2;
wire   [13:0] grp_fu_2217_p2;
wire   [13:0] grp_fu_2226_p2;
wire   [13:0] grp_fu_2235_p2;
wire   [13:0] grp_fu_2244_p2;
wire   [13:0] grp_fu_2253_p2;
wire   [13:0] grp_fu_2262_p2;
wire   [13:0] grp_fu_2271_p2;
wire   [13:0] grp_fu_2280_p2;
wire   [13:0] grp_fu_2289_p2;
wire   [13:0] grp_fu_2298_p2;
wire   [13:0] grp_fu_2307_p2;
wire   [13:0] grp_fu_2316_p2;
wire   [13:0] grp_fu_2325_p2;
wire   [13:0] grp_fu_2334_p2;
wire   [13:0] grp_fu_2343_p2;
wire   [13:0] grp_fu_2352_p2;
wire   [13:0] grp_fu_2361_p2;
wire   [13:0] grp_fu_2370_p2;
wire   [13:0] grp_fu_2379_p2;
wire   [13:0] grp_fu_2388_p2;
wire   [13:0] grp_fu_2397_p2;
wire   [13:0] grp_fu_2406_p2;
wire   [13:0] grp_fu_2415_p2;
wire   [13:0] grp_fu_2424_p2;
wire   [13:0] grp_fu_2433_p2;
wire   [13:0] grp_fu_2442_p2;
wire   [13:0] grp_fu_2451_p2;
wire   [13:0] grp_fu_2460_p2;
wire   [13:0] grp_fu_2469_p2;
wire   [13:0] grp_fu_2478_p2;
wire   [13:0] grp_fu_2487_p2;
wire    regslice_both_output_V_data_V_U_apdone_blk;
reg   [2:0] ap_NS_fsm;
wire    regslice_both_input_V_data_V_U_apdone_blk;
wire   [7:0] input_r_TDATA_int;
wire    input_r_TVALID_int;
reg    input_r_TREADY_int;
wire    regslice_both_input_V_data_V_U_ack_in;
wire    regslice_both_input_V_keep_V_U_apdone_blk;
wire   [0:0] input_r_TKEEP_int;
wire    regslice_both_input_V_keep_V_U_vld_out;
wire    regslice_both_input_V_keep_V_U_ack_in;
wire    regslice_both_input_V_strb_V_U_apdone_blk;
wire   [0:0] input_r_TSTRB_int;
wire    regslice_both_input_V_strb_V_U_vld_out;
wire    regslice_both_input_V_strb_V_U_ack_in;
wire    regslice_both_input_V_last_V_U_apdone_blk;
wire   [0:0] input_r_TLAST_int;
wire    regslice_both_input_V_last_V_U_vld_out;
wire    regslice_both_input_V_last_V_U_ack_in;
wire   [15:0] output_r_TDATA_int;
reg    output_r_TVALID_int;
wire    output_r_TREADY_int;
wire    regslice_both_output_V_data_V_U_vld_out;
wire    regslice_both_output_V_keep_V_U_apdone_blk;
wire    regslice_both_output_V_keep_V_U_ack_in_dummy;
wire    regslice_both_output_V_keep_V_U_vld_out;
wire    regslice_both_output_V_strb_V_U_apdone_blk;
wire    regslice_both_output_V_strb_V_U_ack_in_dummy;
wire    regslice_both_output_V_strb_V_U_vld_out;
wire    regslice_both_output_V_last_V_U_apdone_blk;
wire    regslice_both_output_V_last_V_U_ack_in_dummy;
wire    regslice_both_output_V_last_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 signal_V_62 = 8'd0;
#0 signal_V_61 = 8'd0;
#0 signal_V_60 = 8'd0;
#0 signal_V_59 = 8'd0;
#0 signal_V_58 = 8'd0;
#0 signal_V_57 = 8'd0;
#0 signal_V_56 = 8'd0;
#0 signal_V_55 = 8'd0;
#0 signal_V_54 = 8'd0;
#0 signal_V_53 = 8'd0;
#0 signal_V_52 = 8'd0;
#0 signal_V_51 = 8'd0;
#0 signal_V_50 = 8'd0;
#0 signal_V_49 = 8'd0;
#0 signal_V_48 = 8'd0;
#0 signal_V_47 = 8'd0;
#0 signal_V_46 = 8'd0;
#0 signal_V_45 = 8'd0;
#0 signal_V_44 = 8'd0;
#0 signal_V_43 = 8'd0;
#0 signal_V_42 = 8'd0;
#0 signal_V_41 = 8'd0;
#0 signal_V_40 = 8'd0;
#0 signal_V_39 = 8'd0;
#0 signal_V_38 = 8'd0;
#0 signal_V_37 = 8'd0;
#0 signal_V_36 = 8'd0;
#0 signal_V_35 = 8'd0;
#0 signal_V_34 = 8'd0;
#0 signal_V_33 = 8'd0;
#0 signal_V_32 = 8'd0;
#0 signal_V_31 = 8'd0;
#0 signal_V_30 = 8'd0;
#0 signal_V_29 = 8'd0;
#0 signal_V_28 = 8'd0;
#0 signal_V_27 = 8'd0;
#0 signal_V_26 = 8'd0;
#0 signal_V_25 = 8'd0;
#0 signal_V_24 = 8'd0;
#0 signal_V_23 = 8'd0;
#0 signal_V_22 = 8'd0;
#0 signal_V_21 = 8'd0;
#0 signal_V_20 = 8'd0;
#0 signal_V_19 = 8'd0;
#0 signal_V_18 = 8'd0;
#0 signal_V_17 = 8'd0;
#0 signal_V_16 = 8'd0;
#0 signal_V_15 = 8'd0;
#0 signal_V_14 = 8'd0;
#0 signal_V_13 = 8'd0;
#0 signal_V_12 = 8'd0;
#0 signal_V_11 = 8'd0;
#0 signal_V_10 = 8'd0;
#0 signal_V_9 = 8'd0;
#0 signal_V_8 = 8'd0;
#0 signal_V_7 = 8'd0;
#0 signal_V_6 = 8'd0;
#0 signal_V_5 = 8'd0;
#0 signal_V_4 = 8'd0;
#0 signal_V_3 = 8'd0;
#0 signal_V_2 = 8'd0;
#0 signal_V_1 = 8'd0;
#0 signal_V_0 = 8'd0;
end

fir_stream_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
fir_stream_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .filter_0_V(filter_0_V),
    .filter_1_V(filter_1_V),
    .filter_2_V(filter_2_V),
    .filter_3_V(filter_3_V),
    .filter_4_V(filter_4_V),
    .filter_5_V(filter_5_V),
    .filter_6_V(filter_6_V),
    .filter_7_V(filter_7_V),
    .filter_8_V(filter_8_V),
    .filter_9_V(filter_9_V),
    .filter_10_V(filter_10_V),
    .filter_11_V(filter_11_V),
    .filter_12_V(filter_12_V),
    .filter_13_V(filter_13_V),
    .filter_14_V(filter_14_V),
    .filter_15_V(filter_15_V),
    .filter_16_V(filter_16_V),
    .filter_17_V(filter_17_V),
    .filter_18_V(filter_18_V),
    .filter_19_V(filter_19_V),
    .filter_20_V(filter_20_V),
    .filter_21_V(filter_21_V),
    .filter_22_V(filter_22_V),
    .filter_23_V(filter_23_V),
    .filter_24_V(filter_24_V),
    .filter_25_V(filter_25_V),
    .filter_26_V(filter_26_V),
    .filter_27_V(filter_27_V),
    .filter_28_V(filter_28_V),
    .filter_29_V(filter_29_V),
    .filter_30_V(filter_30_V),
    .filter_31_V(filter_31_V),
    .filter_32_V(filter_32_V),
    .filter_33_V(filter_33_V),
    .filter_34_V(filter_34_V),
    .filter_35_V(filter_35_V),
    .filter_36_V(filter_36_V),
    .filter_37_V(filter_37_V),
    .filter_38_V(filter_38_V),
    .filter_39_V(filter_39_V),
    .filter_40_V(filter_40_V),
    .filter_41_V(filter_41_V),
    .filter_42_V(filter_42_V),
    .filter_43_V(filter_43_V),
    .filter_44_V(filter_44_V),
    .filter_45_V(filter_45_V),
    .filter_46_V(filter_46_V),
    .filter_47_V(filter_47_V),
    .filter_48_V(filter_48_V),
    .filter_49_V(filter_49_V),
    .filter_50_V(filter_50_V),
    .filter_51_V(filter_51_V),
    .filter_52_V(filter_52_V),
    .filter_53_V(filter_53_V),
    .filter_54_V(filter_54_V),
    .filter_55_V(filter_55_V),
    .filter_56_V(filter_56_V),
    .filter_57_V(filter_57_V),
    .filter_58_V(filter_58_V),
    .filter_59_V(filter_59_V),
    .filter_60_V(filter_60_V),
    .filter_61_V(filter_61_V),
    .filter_62_V(filter_62_V),
    .filter_63_V(filter_63_V)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U1(
    .din0(filter_1_V),
    .din1(signal_V_0),
    .din2(grp_fu_2208_p2),
    .dout(grp_fu_2208_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U2(
    .din0(filter_3_V),
    .din1(signal_V_2),
    .din2(grp_fu_2217_p2),
    .dout(grp_fu_2217_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U3(
    .din0(filter_5_V),
    .din1(signal_V_4),
    .din2(grp_fu_2226_p2),
    .dout(grp_fu_2226_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U4(
    .din0(filter_7_V),
    .din1(signal_V_6),
    .din2(grp_fu_2235_p2),
    .dout(grp_fu_2235_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U5(
    .din0(filter_9_V),
    .din1(signal_V_8),
    .din2(grp_fu_2244_p2),
    .dout(grp_fu_2244_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U6(
    .din0(filter_11_V),
    .din1(signal_V_10),
    .din2(grp_fu_2253_p2),
    .dout(grp_fu_2253_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U7(
    .din0(filter_13_V),
    .din1(signal_V_12),
    .din2(grp_fu_2262_p2),
    .dout(grp_fu_2262_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U8(
    .din0(filter_15_V),
    .din1(signal_V_14),
    .din2(grp_fu_2271_p2),
    .dout(grp_fu_2271_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U9(
    .din0(filter_17_V),
    .din1(signal_V_16),
    .din2(grp_fu_2280_p2),
    .dout(grp_fu_2280_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U10(
    .din0(filter_19_V),
    .din1(signal_V_18),
    .din2(grp_fu_2289_p2),
    .dout(grp_fu_2289_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U11(
    .din0(filter_21_V),
    .din1(signal_V_20),
    .din2(grp_fu_2298_p2),
    .dout(grp_fu_2298_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U12(
    .din0(filter_23_V),
    .din1(signal_V_22),
    .din2(grp_fu_2307_p2),
    .dout(grp_fu_2307_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U13(
    .din0(filter_25_V),
    .din1(signal_V_24),
    .din2(grp_fu_2316_p2),
    .dout(grp_fu_2316_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U14(
    .din0(filter_27_V),
    .din1(signal_V_26),
    .din2(grp_fu_2325_p2),
    .dout(grp_fu_2325_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U15(
    .din0(filter_29_V),
    .din1(signal_V_28),
    .din2(grp_fu_2334_p2),
    .dout(grp_fu_2334_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U16(
    .din0(filter_31_V),
    .din1(signal_V_30),
    .din2(grp_fu_2343_p2),
    .dout(grp_fu_2343_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U17(
    .din0(filter_33_V),
    .din1(signal_V_32),
    .din2(grp_fu_2352_p2),
    .dout(grp_fu_2352_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U18(
    .din0(filter_35_V),
    .din1(signal_V_34),
    .din2(grp_fu_2361_p2),
    .dout(grp_fu_2361_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U19(
    .din0(filter_37_V),
    .din1(signal_V_36),
    .din2(grp_fu_2370_p2),
    .dout(grp_fu_2370_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U20(
    .din0(filter_39_V),
    .din1(signal_V_38),
    .din2(grp_fu_2379_p2),
    .dout(grp_fu_2379_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U21(
    .din0(filter_41_V),
    .din1(signal_V_40),
    .din2(grp_fu_2388_p2),
    .dout(grp_fu_2388_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U22(
    .din0(filter_43_V),
    .din1(signal_V_42),
    .din2(grp_fu_2397_p2),
    .dout(grp_fu_2397_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U23(
    .din0(filter_45_V),
    .din1(signal_V_44),
    .din2(grp_fu_2406_p2),
    .dout(grp_fu_2406_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U24(
    .din0(filter_47_V),
    .din1(signal_V_46),
    .din2(grp_fu_2415_p2),
    .dout(grp_fu_2415_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U25(
    .din0(filter_49_V),
    .din1(signal_V_48),
    .din2(grp_fu_2424_p2),
    .dout(grp_fu_2424_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U26(
    .din0(filter_51_V),
    .din1(signal_V_50),
    .din2(grp_fu_2433_p2),
    .dout(grp_fu_2433_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U27(
    .din0(filter_53_V),
    .din1(signal_V_52),
    .din2(grp_fu_2442_p2),
    .dout(grp_fu_2442_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U28(
    .din0(filter_55_V),
    .din1(signal_V_54),
    .din2(grp_fu_2451_p2),
    .dout(grp_fu_2451_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U29(
    .din0(filter_57_V),
    .din1(signal_V_56),
    .din2(grp_fu_2460_p2),
    .dout(grp_fu_2460_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U30(
    .din0(filter_59_V),
    .din1(signal_V_58),
    .din2(grp_fu_2469_p2),
    .dout(grp_fu_2469_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U31(
    .din0(filter_61_V),
    .din1(signal_V_60),
    .din2(grp_fu_2478_p2),
    .dout(grp_fu_2478_p3)
);

fir_stream_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
fir_stream_mac_mubkb_U32(
    .din0(filter_63_V),
    .din1(signal_V_62),
    .din2(grp_fu_2487_p2),
    .dout(grp_fu_2487_p3)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_input_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TDATA),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_V_data_V_U_ack_in),
    .data_out(input_r_TDATA_int),
    .vld_out(input_r_TVALID_int),
    .ack_out(input_r_TREADY_int),
    .apdone_blk(regslice_both_input_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TKEEP),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_V_keep_V_U_ack_in),
    .data_out(input_r_TKEEP_int),
    .vld_out(regslice_both_input_V_keep_V_U_vld_out),
    .ack_out(input_r_TREADY_int),
    .apdone_blk(regslice_both_input_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TSTRB),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_V_strb_V_U_ack_in),
    .data_out(input_r_TSTRB_int),
    .vld_out(regslice_both_input_V_strb_V_U_vld_out),
    .ack_out(input_r_TREADY_int),
    .apdone_blk(regslice_both_input_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TLAST),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_V_last_V_U_ack_in),
    .data_out(input_r_TLAST_int),
    .vld_out(regslice_both_input_V_last_V_U_vld_out),
    .ack_out(input_r_TREADY_int),
    .apdone_blk(regslice_both_input_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_output_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TDATA_int),
    .vld_in(output_r_TVALID_int),
    .ack_in(output_r_TREADY_int),
    .data_out(output_r_TDATA),
    .vld_out(regslice_both_output_V_data_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 2 ))
regslice_both_output_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(2'd0),
    .vld_in(output_r_TVALID_int),
    .ack_in(regslice_both_output_V_keep_V_U_ack_in_dummy),
    .data_out(output_r_TKEEP),
    .vld_out(regslice_both_output_V_keep_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 2 ))
regslice_both_output_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(2'd0),
    .vld_in(output_r_TVALID_int),
    .ack_in(regslice_both_output_V_strb_V_U_ack_in_dummy),
    .data_out(output_r_TSTRB),
    .vld_out(regslice_both_output_V_strb_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_last_V_reg_2496),
    .vld_in(output_r_TVALID_int),
    .ack_in(regslice_both_output_V_last_V_U_ack_in_dummy),
    .data_out(output_r_TLAST),
    .vld_out(regslice_both_output_V_last_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((input_r_TVALID_int == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln700_14_reg_2501 <= add_ln700_14_fu_2082_p2;
        add_ln700_29_reg_2506 <= add_ln700_29_fu_2116_p2;
        add_ln700_37_reg_2511 <= add_ln700_37_fu_2130_p2;
        add_ln700_44_reg_2516 <= add_ln700_44_fu_2144_p2;
        add_ln700_60_reg_2521 <= add_ln700_60_fu_2178_p2;
        signal_V_0 <= input_r_TDATA_int;
        signal_V_1 <= signal_V_0;
        signal_V_10 <= signal_V_9;
        signal_V_11 <= signal_V_10;
        signal_V_12 <= signal_V_11;
        signal_V_13 <= signal_V_12;
        signal_V_14 <= signal_V_13;
        signal_V_15 <= signal_V_14;
        signal_V_16 <= signal_V_15;
        signal_V_17 <= signal_V_16;
        signal_V_18 <= signal_V_17;
        signal_V_19 <= signal_V_18;
        signal_V_2 <= signal_V_1;
        signal_V_20 <= signal_V_19;
        signal_V_21 <= signal_V_20;
        signal_V_22 <= signal_V_21;
        signal_V_23 <= signal_V_22;
        signal_V_24 <= signal_V_23;
        signal_V_25 <= signal_V_24;
        signal_V_26 <= signal_V_25;
        signal_V_27 <= signal_V_26;
        signal_V_28 <= signal_V_27;
        signal_V_29 <= signal_V_28;
        signal_V_3 <= signal_V_2;
        signal_V_30 <= signal_V_29;
        signal_V_31 <= signal_V_30;
        signal_V_32 <= signal_V_31;
        signal_V_33 <= signal_V_32;
        signal_V_34 <= signal_V_33;
        signal_V_35 <= signal_V_34;
        signal_V_36 <= signal_V_35;
        signal_V_37 <= signal_V_36;
        signal_V_38 <= signal_V_37;
        signal_V_39 <= signal_V_38;
        signal_V_4 <= signal_V_3;
        signal_V_40 <= signal_V_39;
        signal_V_41 <= signal_V_40;
        signal_V_42 <= signal_V_41;
        signal_V_43 <= signal_V_42;
        signal_V_44 <= signal_V_43;
        signal_V_45 <= signal_V_44;
        signal_V_46 <= signal_V_45;
        signal_V_47 <= signal_V_46;
        signal_V_48 <= signal_V_47;
        signal_V_49 <= signal_V_48;
        signal_V_5 <= signal_V_4;
        signal_V_50 <= signal_V_49;
        signal_V_51 <= signal_V_50;
        signal_V_52 <= signal_V_51;
        signal_V_53 <= signal_V_52;
        signal_V_54 <= signal_V_53;
        signal_V_55 <= signal_V_54;
        signal_V_56 <= signal_V_55;
        signal_V_57 <= signal_V_56;
        signal_V_58 <= signal_V_57;
        signal_V_59 <= signal_V_58;
        signal_V_6 <= signal_V_5;
        signal_V_60 <= signal_V_59;
        signal_V_61 <= signal_V_60;
        signal_V_62 <= signal_V_61;
        signal_V_7 <= signal_V_6;
        signal_V_8 <= signal_V_7;
        signal_V_9 <= signal_V_8;
        tmp_last_V_reg_2496 <= input_r_TLAST_int;
    end
end

always @ (*) begin
    if ((~((output_r_TREADY_int == 1'b0) | (regslice_both_output_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((output_r_TREADY_int == 1'b0) | (regslice_both_output_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        input_r_TDATA_blk_n = input_r_TVALID_int;
    end else begin
        input_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((input_r_TVALID == 1'b1) & (regslice_both_input_V_data_V_U_ack_in == 1'b1))) begin
        input_r_TREADY = 1'b1;
    end else begin
        input_r_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((input_r_TVALID_int == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_r_TREADY_int = 1'b1;
    end else begin
        input_r_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        output_r_TDATA_blk_n = output_r_TREADY_int;
    end else begin
        output_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (output_r_TREADY_int == 1'b1))) begin
        output_r_TVALID_int = 1'b1;
    end else begin
        output_r_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((input_r_TVALID_int == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (output_r_TREADY_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((output_r_TREADY_int == 1'b0) | (regslice_both_output_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln700_12_fu_2072_p2 = ($signed(grp_fu_2271_p3) + $signed(grp_fu_2262_p3));

assign add_ln700_13_fu_2076_p2 = (add_ln700_12_fu_2072_p2 + add_ln700_9_fu_2068_p2);

assign add_ln700_14_fu_2082_p2 = (add_ln700_13_fu_2076_p2 + add_ln700_6_fu_2062_p2);

assign add_ln700_17_fu_2088_p2 = ($signed(grp_fu_2289_p3) + $signed(grp_fu_2280_p3));

assign add_ln700_20_fu_2092_p2 = ($signed(grp_fu_2307_p3) + $signed(grp_fu_2298_p3));

assign add_ln700_21_fu_2096_p2 = (add_ln700_20_fu_2092_p2 + add_ln700_17_fu_2088_p2);

assign add_ln700_24_fu_2102_p2 = ($signed(grp_fu_2325_p3) + $signed(grp_fu_2316_p3));

assign add_ln700_27_fu_2106_p2 = ($signed(grp_fu_2343_p3) + $signed(grp_fu_2334_p3));

assign add_ln700_28_fu_2110_p2 = (add_ln700_27_fu_2106_p2 + add_ln700_24_fu_2102_p2);

assign add_ln700_29_fu_2116_p2 = (add_ln700_28_fu_2110_p2 + add_ln700_21_fu_2096_p2);

assign add_ln700_2_fu_2054_p2 = ($signed(grp_fu_2217_p3) + $signed(grp_fu_2208_p3));

assign add_ln700_30_fu_2184_p2 = (add_ln700_29_reg_2506 + add_ln700_14_reg_2501);

assign add_ln700_33_fu_2122_p2 = ($signed(grp_fu_2361_p3) + $signed(grp_fu_2352_p3));

assign add_ln700_36_fu_2126_p2 = ($signed(grp_fu_2379_p3) + $signed(grp_fu_2370_p3));

assign add_ln700_37_fu_2130_p2 = (add_ln700_36_fu_2126_p2 + add_ln700_33_fu_2122_p2);

assign add_ln700_40_fu_2136_p2 = ($signed(grp_fu_2397_p3) + $signed(grp_fu_2388_p3));

assign add_ln700_43_fu_2140_p2 = ($signed(grp_fu_2415_p3) + $signed(grp_fu_2406_p3));

assign add_ln700_44_fu_2144_p2 = (add_ln700_43_fu_2140_p2 + add_ln700_40_fu_2136_p2);

assign add_ln700_45_fu_2188_p2 = (add_ln700_44_reg_2516 + add_ln700_37_reg_2511);

assign add_ln700_48_fu_2150_p2 = ($signed(grp_fu_2433_p3) + $signed(grp_fu_2424_p3));

assign add_ln700_51_fu_2154_p2 = ($signed(grp_fu_2451_p3) + $signed(grp_fu_2442_p3));

assign add_ln700_52_fu_2158_p2 = (add_ln700_51_fu_2154_p2 + add_ln700_48_fu_2150_p2);

assign add_ln700_55_fu_2164_p2 = ($signed(grp_fu_2469_p3) + $signed(grp_fu_2460_p3));

assign add_ln700_58_fu_2168_p2 = ($signed(grp_fu_2487_p3) + $signed(grp_fu_2478_p3));

assign add_ln700_59_fu_2172_p2 = (add_ln700_58_fu_2168_p2 + add_ln700_55_fu_2164_p2);

assign add_ln700_5_fu_2058_p2 = ($signed(grp_fu_2235_p3) + $signed(grp_fu_2226_p3));

assign add_ln700_60_fu_2178_p2 = (add_ln700_59_fu_2172_p2 + add_ln700_52_fu_2158_p2);

assign add_ln700_61_fu_2192_p2 = (add_ln700_60_reg_2521 + add_ln700_45_fu_2188_p2);

assign add_ln700_6_fu_2062_p2 = (add_ln700_5_fu_2058_p2 + add_ln700_2_fu_2054_p2);

assign add_ln700_9_fu_2068_p2 = ($signed(grp_fu_2253_p3) + $signed(grp_fu_2244_p3));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((input_r_TVALID_int == 1'b0) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_2208_p2 = ($signed(mul_ln700_fu_1358_p0) * $signed(mul_ln700_fu_1358_p1));

assign grp_fu_2217_p2 = ($signed(mul_ln700_2_fu_1380_p0) * $signed(mul_ln700_2_fu_1380_p1));

assign grp_fu_2226_p2 = ($signed(mul_ln700_4_fu_1402_p0) * $signed(mul_ln700_4_fu_1402_p1));

assign grp_fu_2235_p2 = ($signed(mul_ln700_6_fu_1424_p0) * $signed(mul_ln700_6_fu_1424_p1));

assign grp_fu_2244_p2 = ($signed(mul_ln700_8_fu_1446_p0) * $signed(mul_ln700_8_fu_1446_p1));

assign grp_fu_2253_p2 = ($signed(mul_ln700_10_fu_1468_p0) * $signed(mul_ln700_10_fu_1468_p1));

assign grp_fu_2262_p2 = ($signed(mul_ln700_12_fu_1490_p0) * $signed(mul_ln700_12_fu_1490_p1));

assign grp_fu_2271_p2 = ($signed(mul_ln700_14_fu_1512_p0) * $signed(mul_ln700_14_fu_1512_p1));

assign grp_fu_2280_p2 = ($signed(mul_ln700_16_fu_1534_p0) * $signed(mul_ln700_16_fu_1534_p1));

assign grp_fu_2289_p2 = ($signed(mul_ln700_18_fu_1556_p0) * $signed(mul_ln700_18_fu_1556_p1));

assign grp_fu_2298_p2 = ($signed(mul_ln700_20_fu_1578_p0) * $signed(mul_ln700_20_fu_1578_p1));

assign grp_fu_2307_p2 = ($signed(mul_ln700_22_fu_1600_p0) * $signed(mul_ln700_22_fu_1600_p1));

assign grp_fu_2316_p2 = ($signed(mul_ln700_24_fu_1622_p0) * $signed(mul_ln700_24_fu_1622_p1));

assign grp_fu_2325_p2 = ($signed(mul_ln700_26_fu_1644_p0) * $signed(mul_ln700_26_fu_1644_p1));

assign grp_fu_2334_p2 = ($signed(mul_ln700_28_fu_1666_p0) * $signed(mul_ln700_28_fu_1666_p1));

assign grp_fu_2343_p2 = ($signed(mul_ln700_30_fu_1688_p0) * $signed(mul_ln700_30_fu_1688_p1));

assign grp_fu_2352_p2 = ($signed(mul_ln700_32_fu_1710_p0) * $signed(mul_ln700_32_fu_1710_p1));

assign grp_fu_2361_p2 = ($signed(mul_ln700_34_fu_1732_p0) * $signed(mul_ln700_34_fu_1732_p1));

assign grp_fu_2370_p2 = ($signed(mul_ln700_36_fu_1754_p0) * $signed(mul_ln700_36_fu_1754_p1));

assign grp_fu_2379_p2 = ($signed(mul_ln700_38_fu_1776_p0) * $signed(mul_ln700_38_fu_1776_p1));

assign grp_fu_2388_p2 = ($signed(mul_ln700_40_fu_1798_p0) * $signed(mul_ln700_40_fu_1798_p1));

assign grp_fu_2397_p2 = ($signed(mul_ln700_42_fu_1820_p0) * $signed(mul_ln700_42_fu_1820_p1));

assign grp_fu_2406_p2 = ($signed(mul_ln700_44_fu_1842_p0) * $signed(mul_ln700_44_fu_1842_p1));

assign grp_fu_2415_p2 = ($signed(mul_ln700_46_fu_1864_p0) * $signed(mul_ln700_46_fu_1864_p1));

assign grp_fu_2424_p2 = ($signed(mul_ln700_48_fu_1886_p0) * $signed(mul_ln700_48_fu_1886_p1));

assign grp_fu_2433_p2 = ($signed(mul_ln700_50_fu_1908_p0) * $signed(mul_ln700_50_fu_1908_p1));

assign grp_fu_2442_p2 = ($signed(mul_ln700_52_fu_1930_p0) * $signed(mul_ln700_52_fu_1930_p1));

assign grp_fu_2451_p2 = ($signed(mul_ln700_54_fu_1952_p0) * $signed(mul_ln700_54_fu_1952_p1));

assign grp_fu_2460_p2 = ($signed(mul_ln700_56_fu_1974_p0) * $signed(mul_ln700_56_fu_1974_p1));

assign grp_fu_2469_p2 = ($signed(mul_ln700_58_fu_1996_p0) * $signed(mul_ln700_58_fu_1996_p1));

assign grp_fu_2478_p2 = ($signed(mul_ln700_60_fu_2018_p0) * $signed(mul_ln700_60_fu_2018_p1));

assign grp_fu_2487_p2 = ($signed(mul_ln700_62_fu_2040_p0) * $signed(mul_ln700_62_fu_2040_p1));

assign mul_ln700_10_fu_1468_p0 = filter_10_V;

assign mul_ln700_10_fu_1468_p1 = sext_ln700_74_fu_1464_p0;

assign mul_ln700_12_fu_1490_p0 = filter_12_V;

assign mul_ln700_12_fu_1490_p1 = sext_ln700_76_fu_1486_p0;

assign mul_ln700_14_fu_1512_p0 = filter_14_V;

assign mul_ln700_14_fu_1512_p1 = sext_ln700_78_fu_1508_p0;

assign mul_ln700_16_fu_1534_p0 = filter_16_V;

assign mul_ln700_16_fu_1534_p1 = sext_ln700_80_fu_1530_p0;

assign mul_ln700_18_fu_1556_p0 = filter_18_V;

assign mul_ln700_18_fu_1556_p1 = sext_ln700_82_fu_1552_p0;

assign mul_ln700_20_fu_1578_p0 = filter_20_V;

assign mul_ln700_20_fu_1578_p1 = sext_ln700_84_fu_1574_p0;

assign mul_ln700_22_fu_1600_p0 = filter_22_V;

assign mul_ln700_22_fu_1600_p1 = sext_ln700_86_fu_1596_p0;

assign mul_ln700_24_fu_1622_p0 = filter_24_V;

assign mul_ln700_24_fu_1622_p1 = sext_ln700_88_fu_1618_p0;

assign mul_ln700_26_fu_1644_p0 = filter_26_V;

assign mul_ln700_26_fu_1644_p1 = sext_ln700_90_fu_1640_p0;

assign mul_ln700_28_fu_1666_p0 = filter_28_V;

assign mul_ln700_28_fu_1666_p1 = sext_ln700_92_fu_1662_p0;

assign mul_ln700_2_fu_1380_p0 = filter_2_V;

assign mul_ln700_2_fu_1380_p1 = sext_ln700_66_fu_1376_p0;

assign mul_ln700_30_fu_1688_p0 = filter_30_V;

assign mul_ln700_30_fu_1688_p1 = sext_ln700_94_fu_1684_p0;

assign mul_ln700_32_fu_1710_p0 = filter_32_V;

assign mul_ln700_32_fu_1710_p1 = sext_ln700_96_fu_1706_p0;

assign mul_ln700_34_fu_1732_p0 = filter_34_V;

assign mul_ln700_34_fu_1732_p1 = sext_ln700_98_fu_1728_p0;

assign mul_ln700_36_fu_1754_p0 = filter_36_V;

assign mul_ln700_36_fu_1754_p1 = sext_ln700_100_fu_1750_p0;

assign mul_ln700_38_fu_1776_p0 = filter_38_V;

assign mul_ln700_38_fu_1776_p1 = sext_ln700_102_fu_1772_p0;

assign mul_ln700_40_fu_1798_p0 = filter_40_V;

assign mul_ln700_40_fu_1798_p1 = sext_ln700_104_fu_1794_p0;

assign mul_ln700_42_fu_1820_p0 = filter_42_V;

assign mul_ln700_42_fu_1820_p1 = sext_ln700_106_fu_1816_p0;

assign mul_ln700_44_fu_1842_p0 = filter_44_V;

assign mul_ln700_44_fu_1842_p1 = sext_ln700_108_fu_1838_p0;

assign mul_ln700_46_fu_1864_p0 = filter_46_V;

assign mul_ln700_46_fu_1864_p1 = sext_ln700_110_fu_1860_p0;

assign mul_ln700_48_fu_1886_p0 = filter_48_V;

assign mul_ln700_48_fu_1886_p1 = sext_ln700_112_fu_1882_p0;

assign mul_ln700_4_fu_1402_p0 = filter_4_V;

assign mul_ln700_4_fu_1402_p1 = sext_ln700_68_fu_1398_p0;

assign mul_ln700_50_fu_1908_p0 = filter_50_V;

assign mul_ln700_50_fu_1908_p1 = sext_ln700_114_fu_1904_p0;

assign mul_ln700_52_fu_1930_p0 = filter_52_V;

assign mul_ln700_52_fu_1930_p1 = sext_ln700_116_fu_1926_p0;

assign mul_ln700_54_fu_1952_p0 = filter_54_V;

assign mul_ln700_54_fu_1952_p1 = sext_ln700_118_fu_1948_p0;

assign mul_ln700_56_fu_1974_p0 = filter_56_V;

assign mul_ln700_56_fu_1974_p1 = sext_ln700_120_fu_1970_p0;

assign mul_ln700_58_fu_1996_p0 = filter_58_V;

assign mul_ln700_58_fu_1996_p1 = sext_ln700_122_fu_1992_p0;

assign mul_ln700_60_fu_2018_p0 = filter_60_V;

assign mul_ln700_60_fu_2018_p1 = sext_ln700_124_fu_2014_p0;

assign mul_ln700_62_fu_2040_p0 = filter_62_V;

assign mul_ln700_62_fu_2040_p1 = sext_ln700_126_fu_2036_p0;

assign mul_ln700_6_fu_1424_p0 = filter_6_V;

assign mul_ln700_6_fu_1424_p1 = sext_ln700_70_fu_1420_p0;

assign mul_ln700_8_fu_1446_p0 = filter_8_V;

assign mul_ln700_8_fu_1446_p1 = sext_ln700_72_fu_1442_p0;

assign mul_ln700_fu_1358_p0 = filter_0_V;

assign mul_ln700_fu_1358_p1 = sext_ln700_1_fu_1354_p0;

assign output_r_TDATA_int = tmp_data_V_1_fu_2197_p2;

assign output_r_TVALID = regslice_both_output_V_data_V_U_vld_out;

assign sext_ln700_100_fu_1750_p0 = signal_V_35;

assign sext_ln700_102_fu_1772_p0 = signal_V_37;

assign sext_ln700_104_fu_1794_p0 = signal_V_39;

assign sext_ln700_106_fu_1816_p0 = signal_V_41;

assign sext_ln700_108_fu_1838_p0 = signal_V_43;

assign sext_ln700_110_fu_1860_p0 = signal_V_45;

assign sext_ln700_112_fu_1882_p0 = signal_V_47;

assign sext_ln700_114_fu_1904_p0 = signal_V_49;

assign sext_ln700_116_fu_1926_p0 = signal_V_51;

assign sext_ln700_118_fu_1948_p0 = signal_V_53;

assign sext_ln700_120_fu_1970_p0 = signal_V_55;

assign sext_ln700_122_fu_1992_p0 = signal_V_57;

assign sext_ln700_124_fu_2014_p0 = signal_V_59;

assign sext_ln700_126_fu_2036_p0 = signal_V_61;

assign sext_ln700_1_fu_1354_p0 = input_r_TDATA_int;

assign sext_ln700_66_fu_1376_p0 = signal_V_1;

assign sext_ln700_68_fu_1398_p0 = signal_V_3;

assign sext_ln700_70_fu_1420_p0 = signal_V_5;

assign sext_ln700_72_fu_1442_p0 = signal_V_7;

assign sext_ln700_74_fu_1464_p0 = signal_V_9;

assign sext_ln700_76_fu_1486_p0 = signal_V_11;

assign sext_ln700_78_fu_1508_p0 = signal_V_13;

assign sext_ln700_80_fu_1530_p0 = signal_V_15;

assign sext_ln700_82_fu_1552_p0 = signal_V_17;

assign sext_ln700_84_fu_1574_p0 = signal_V_19;

assign sext_ln700_86_fu_1596_p0 = signal_V_21;

assign sext_ln700_88_fu_1618_p0 = signal_V_23;

assign sext_ln700_90_fu_1640_p0 = signal_V_25;

assign sext_ln700_92_fu_1662_p0 = signal_V_27;

assign sext_ln700_94_fu_1684_p0 = signal_V_29;

assign sext_ln700_96_fu_1706_p0 = signal_V_31;

assign sext_ln700_98_fu_1728_p0 = signal_V_33;

assign tmp_data_V_1_fu_2197_p2 = (add_ln700_61_fu_2192_p2 + add_ln700_30_fu_2184_p2);

endmodule //fir_stream

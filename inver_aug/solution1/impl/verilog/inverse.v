// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="inverse,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.162500,HLS_SYN_LAT=10695,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=2,HLS_SYN_FF=785,HLS_SYN_LUT=2393,HLS_VERSION=2020_1}" *)

module inverse (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        A_address1,
        A_ce1,
        A_q1,
        B_V_address0,
        B_V_ce0,
        B_V_we0,
        B_V_d0,
        B_V_address1,
        B_V_ce1,
        B_V_we1,
        B_V_d1
);

parameter    ap_ST_fsm_state1 = 65'd1;
parameter    ap_ST_fsm_state2 = 65'd2;
parameter    ap_ST_fsm_state3 = 65'd4;
parameter    ap_ST_fsm_state4 = 65'd8;
parameter    ap_ST_fsm_state5 = 65'd16;
parameter    ap_ST_fsm_state6 = 65'd32;
parameter    ap_ST_fsm_state7 = 65'd64;
parameter    ap_ST_fsm_state8 = 65'd128;
parameter    ap_ST_fsm_state9 = 65'd256;
parameter    ap_ST_fsm_state10 = 65'd512;
parameter    ap_ST_fsm_state11 = 65'd1024;
parameter    ap_ST_fsm_state12 = 65'd2048;
parameter    ap_ST_fsm_state13 = 65'd4096;
parameter    ap_ST_fsm_state14 = 65'd8192;
parameter    ap_ST_fsm_state15 = 65'd16384;
parameter    ap_ST_fsm_state16 = 65'd32768;
parameter    ap_ST_fsm_state17 = 65'd65536;
parameter    ap_ST_fsm_state18 = 65'd131072;
parameter    ap_ST_fsm_state19 = 65'd262144;
parameter    ap_ST_fsm_state20 = 65'd524288;
parameter    ap_ST_fsm_state21 = 65'd1048576;
parameter    ap_ST_fsm_state22 = 65'd2097152;
parameter    ap_ST_fsm_state23 = 65'd4194304;
parameter    ap_ST_fsm_state24 = 65'd8388608;
parameter    ap_ST_fsm_state25 = 65'd16777216;
parameter    ap_ST_fsm_state26 = 65'd33554432;
parameter    ap_ST_fsm_state27 = 65'd67108864;
parameter    ap_ST_fsm_state28 = 65'd134217728;
parameter    ap_ST_fsm_state29 = 65'd268435456;
parameter    ap_ST_fsm_state30 = 65'd536870912;
parameter    ap_ST_fsm_state31 = 65'd1073741824;
parameter    ap_ST_fsm_state32 = 65'd2147483648;
parameter    ap_ST_fsm_state33 = 65'd4294967296;
parameter    ap_ST_fsm_state34 = 65'd8589934592;
parameter    ap_ST_fsm_state35 = 65'd17179869184;
parameter    ap_ST_fsm_state36 = 65'd34359738368;
parameter    ap_ST_fsm_state37 = 65'd68719476736;
parameter    ap_ST_fsm_state38 = 65'd137438953472;
parameter    ap_ST_fsm_state39 = 65'd274877906944;
parameter    ap_ST_fsm_state40 = 65'd549755813888;
parameter    ap_ST_fsm_state41 = 65'd1099511627776;
parameter    ap_ST_fsm_state42 = 65'd2199023255552;
parameter    ap_ST_fsm_state43 = 65'd4398046511104;
parameter    ap_ST_fsm_state44 = 65'd8796093022208;
parameter    ap_ST_fsm_state45 = 65'd17592186044416;
parameter    ap_ST_fsm_state46 = 65'd35184372088832;
parameter    ap_ST_fsm_state47 = 65'd70368744177664;
parameter    ap_ST_fsm_state48 = 65'd140737488355328;
parameter    ap_ST_fsm_state49 = 65'd281474976710656;
parameter    ap_ST_fsm_state50 = 65'd562949953421312;
parameter    ap_ST_fsm_state51 = 65'd1125899906842624;
parameter    ap_ST_fsm_state52 = 65'd2251799813685248;
parameter    ap_ST_fsm_state53 = 65'd4503599627370496;
parameter    ap_ST_fsm_state54 = 65'd9007199254740992;
parameter    ap_ST_fsm_state55 = 65'd18014398509481984;
parameter    ap_ST_fsm_state56 = 65'd36028797018963968;
parameter    ap_ST_fsm_state57 = 65'd72057594037927936;
parameter    ap_ST_fsm_state58 = 65'd144115188075855872;
parameter    ap_ST_fsm_state59 = 65'd288230376151711744;
parameter    ap_ST_fsm_pp1_stage0 = 65'd576460752303423488;
parameter    ap_ST_fsm_pp1_stage1 = 65'd1152921504606846976;
parameter    ap_ST_fsm_pp1_stage2 = 65'd2305843009213693952;
parameter    ap_ST_fsm_pp1_stage3 = 65'd4611686018427387904;
parameter    ap_ST_fsm_pp1_stage4 = 65'd9223372036854775808;
parameter    ap_ST_fsm_state66 = 65'd18446744073709551616;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [6:0] A_address1;
output   A_ce1;
input  [31:0] A_q1;
output  [6:0] B_V_address0;
output   B_V_ce0;
output   B_V_we0;
output  [21:0] B_V_d0;
output  [6:0] B_V_address1;
output   B_V_ce1;
output   B_V_we1;
output  [21:0] B_V_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] A_address0;
reg A_ce0;
reg[6:0] A_address1;
reg A_ce1;
reg[6:0] B_V_address0;
reg B_V_ce0;
reg B_V_we0;
reg[6:0] B_V_address1;
reg B_V_ce1;
reg B_V_we1;

(* fsm_encoding = "none" *) reg   [64:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] i_2_reg_650;
wire   [3:0] i_fu_667_p2;
reg   [3:0] i_reg_1795;
wire    ap_CS_fsm_state2;
wire   [7:0] add_ln37_fu_697_p2;
reg   [7:0] add_ln37_reg_1800;
wire   [0:0] icmp_ln34_fu_661_p2;
wire   [8:0] add_ln203_fu_743_p2;
reg   [8:0] add_ln203_reg_1822;
wire   [0:0] icmp_ln41_2_fu_801_p2;
reg   [0:0] icmp_ln41_2_reg_1844;
wire   [0:0] icmp_ln41_3_fu_807_p2;
reg   [0:0] icmp_ln41_3_reg_1849;
wire   [0:0] icmp_ln41_4_fu_813_p2;
reg   [0:0] icmp_ln41_4_reg_1854;
wire   [0:0] icmp_ln41_5_fu_819_p2;
reg   [0:0] icmp_ln41_5_reg_1859;
wire   [0:0] icmp_ln41_6_fu_825_p2;
reg   [0:0] icmp_ln41_6_reg_1864;
wire   [0:0] icmp_ln41_7_fu_831_p2;
reg   [0:0] icmp_ln41_7_reg_1869;
wire   [0:0] icmp_ln41_8_fu_837_p2;
reg   [0:0] icmp_ln41_8_reg_1874;
wire   [0:0] icmp_ln41_9_fu_843_p2;
reg   [0:0] icmp_ln41_9_reg_1879;
wire    ap_CS_fsm_state3;
wire   [7:0] trunc_ln731_fu_889_p1;
reg   [7:0] trunc_ln731_reg_1894;
wire   [7:0] trunc_ln731_1_fu_893_p1;
reg   [7:0] trunc_ln731_1_reg_1899;
wire    ap_CS_fsm_state4;
wire   [7:0] trunc_ln731_2_fu_953_p1;
reg   [7:0] trunc_ln731_2_reg_1914;
wire   [7:0] trunc_ln731_3_fu_957_p1;
reg   [7:0] trunc_ln731_3_reg_1919;
wire    ap_CS_fsm_state5;
wire   [7:0] trunc_ln731_4_fu_1017_p1;
reg   [7:0] trunc_ln731_4_reg_1934;
wire   [7:0] trunc_ln731_5_fu_1021_p1;
reg   [7:0] trunc_ln731_5_reg_1939;
wire    ap_CS_fsm_state6;
wire   [7:0] trunc_ln731_6_fu_1081_p1;
reg   [7:0] trunc_ln731_6_reg_1954;
wire   [7:0] trunc_ln731_7_fu_1085_p1;
reg   [7:0] trunc_ln731_7_reg_1959;
wire   [7:0] trunc_ln731_8_fu_1135_p1;
reg   [7:0] trunc_ln731_8_reg_1964;
wire    ap_CS_fsm_state7;
wire   [7:0] trunc_ln731_9_fu_1139_p1;
reg   [7:0] trunc_ln731_9_reg_1969;
wire   [0:0] icmp_ln47_fu_1287_p2;
wire    ap_CS_fsm_state13;
wire   [3:0] i_4_fu_1293_p2;
reg   [3:0] i_4_reg_1978;
wire   [8:0] zext_ln203_6_fu_1299_p1;
reg   [8:0] zext_ln203_6_reg_1983;
wire   [8:0] add_ln203_17_fu_1327_p2;
reg   [8:0] add_ln203_17_reg_1988;
wire  signed [35:0] sext_ln1148_fu_1344_p1;
reg  signed [35:0] sext_ln1148_reg_1999;
wire    ap_CS_fsm_state14;
wire   [4:0] j_fu_1354_p2;
reg   [4:0] j_reg_2007;
wire    ap_CS_fsm_state15;
reg   [7:0] aug_V_addr_2_reg_2012;
wire   [0:0] icmp_ln52_fu_1348_p2;
wire    ap_CS_fsm_state16;
wire   [3:0] j_1_fu_1398_p2;
reg   [3:0] j_1_reg_2026;
wire    ap_CS_fsm_state56;
wire   [0:0] icmp_ln58_fu_1404_p2;
reg   [0:0] icmp_ln58_reg_2031;
wire   [0:0] icmp_ln57_fu_1392_p2;
wire   [8:0] add_ln203_39_fu_1434_p2;
reg   [8:0] add_ln203_39_reg_2035;
wire  signed [35:0] sext_ln1193_fu_1450_p1;
reg  signed [35:0] sext_ln1193_reg_2045;
wire    ap_CS_fsm_state57;
wire   [4:0] k_fu_1460_p2;
reg   [4:0] k_reg_2053;
wire    ap_CS_fsm_state58;
wire   [0:0] icmp_ln60_fu_1454_p2;
reg   [7:0] aug_V_addr_7_reg_2063;
wire   [0:0] icmp_ln69_fu_1524_p2;
reg   [0:0] icmp_ln69_reg_2069;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state60_pp1_stage0_iter0;
wire    ap_block_state65_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [3:0] i_3_fu_1530_p2;
reg   [3:0] i_3_reg_2073;
reg    ap_enable_reg_pp1_iter0;
wire   [7:0] add_ln203_19_fu_1560_p2;
reg   [7:0] add_ln203_19_reg_2078;
wire   [8:0] add_ln203_28_fu_1590_p2;
reg   [8:0] add_ln203_28_reg_2092;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_state61_pp1_stage1_iter0;
wire    ap_block_pp1_stage1_11001;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_state62_pp1_stage2_iter0;
wire    ap_block_pp1_stage2_11001;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_state63_pp1_stage3_iter0;
wire    ap_block_pp1_stage3_11001;
wire    ap_CS_fsm_pp1_stage4;
wire    ap_block_state64_pp1_stage4_iter0;
wire    ap_block_pp1_stage4_11001;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state60;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage4_subdone;
reg   [7:0] aug_V_address0;
reg    aug_V_ce0;
reg    aug_V_we0;
reg   [21:0] aug_V_d0;
wire   [21:0] aug_V_q0;
reg   [7:0] aug_V_address1;
reg    aug_V_ce1;
reg    aug_V_we1;
reg   [21:0] aug_V_d1;
wire   [21:0] aug_V_q1;
reg   [3:0] i_0_reg_594;
wire    ap_CS_fsm_state11;
reg   [3:0] i_1_reg_605;
wire    ap_CS_fsm_state12;
reg   [4:0] j_2_reg_617;
wire    ap_CS_fsm_state55;
reg   [3:0] j_3_reg_628;
reg   [4:0] k_0_reg_639;
wire    ap_CS_fsm_state59;
reg   [3:0] ap_phi_mux_i_2_phi_fu_654_p4;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln37_2_fu_703_p1;
wire   [63:0] zext_ln37_3_fu_714_p1;
wire  signed [63:0] sext_ln203_6_fu_755_p1;
wire  signed [63:0] sext_ln203_7_fu_766_p1;
wire  signed [63:0] sext_ln37_fu_854_p1;
wire  signed [63:0] sext_ln37_1_fu_864_p1;
wire  signed [63:0] sext_ln203_8_fu_874_p1;
wire  signed [63:0] sext_ln203_9_fu_884_p1;
wire  signed [63:0] sext_ln37_2_fu_918_p1;
wire  signed [63:0] sext_ln37_3_fu_928_p1;
wire  signed [63:0] sext_ln203_10_fu_938_p1;
wire  signed [63:0] sext_ln203_11_fu_948_p1;
wire  signed [63:0] sext_ln37_4_fu_982_p1;
wire  signed [63:0] sext_ln37_5_fu_992_p1;
wire  signed [63:0] sext_ln203_12_fu_1002_p1;
wire  signed [63:0] sext_ln203_13_fu_1012_p1;
wire  signed [63:0] sext_ln37_6_fu_1046_p1;
wire  signed [63:0] sext_ln37_7_fu_1056_p1;
wire  signed [63:0] sext_ln203_14_fu_1066_p1;
wire  signed [63:0] sext_ln203_15_fu_1076_p1;
wire   [63:0] zext_ln203_2_fu_1105_p1;
wire   [63:0] zext_ln203_3_fu_1114_p1;
wire   [63:0] zext_ln203_4_fu_1148_p1;
wire    ap_CS_fsm_state8;
wire   [63:0] zext_ln203_5_fu_1158_p1;
wire  signed [63:0] sext_ln203_fu_1184_p1;
wire    ap_CS_fsm_state9;
wire  signed [63:0] sext_ln203_1_fu_1194_p1;
wire  signed [63:0] sext_ln203_2_fu_1220_p1;
wire    ap_CS_fsm_state10;
wire  signed [63:0] sext_ln203_3_fu_1230_p1;
wire  signed [63:0] sext_ln203_4_fu_1256_p1;
wire  signed [63:0] sext_ln203_5_fu_1266_p1;
wire   [63:0] zext_ln203_9_fu_1339_p1;
wire   [63:0] zext_ln1265_1_fu_1369_p1;
wire   [63:0] zext_ln203_18_fu_1445_p1;
wire   [63:0] zext_ln1116_1_fu_1475_p1;
wire   [63:0] zext_ln1265_2_fu_1485_p1;
wire  signed [63:0] sext_ln203_24_fu_1602_p1;
wire  signed [63:0] sext_ln203_25_fu_1613_p1;
wire   [63:0] zext_ln203_12_fu_1618_p1;
wire    ap_block_pp1_stage1;
wire   [63:0] zext_ln203_13_fu_1627_p1;
wire  signed [63:0] sext_ln203_26_fu_1637_p1;
wire  signed [63:0] sext_ln203_27_fu_1647_p1;
wire  signed [63:0] sext_ln203_16_fu_1657_p1;
wire    ap_block_pp1_stage2;
wire  signed [63:0] sext_ln203_17_fu_1667_p1;
wire  signed [63:0] sext_ln203_28_fu_1677_p1;
wire  signed [63:0] sext_ln203_29_fu_1687_p1;
wire  signed [63:0] sext_ln203_18_fu_1697_p1;
wire    ap_block_pp1_stage3;
wire  signed [63:0] sext_ln203_19_fu_1707_p1;
wire  signed [63:0] sext_ln203_30_fu_1717_p1;
wire  signed [63:0] sext_ln203_31_fu_1727_p1;
wire  signed [63:0] sext_ln203_20_fu_1737_p1;
wire    ap_block_pp1_stage4;
wire  signed [63:0] sext_ln203_21_fu_1747_p1;
wire  signed [63:0] sext_ln203_32_fu_1757_p1;
wire  signed [63:0] sext_ln203_33_fu_1767_p1;
wire  signed [63:0] sext_ln203_22_fu_1777_p1;
wire  signed [63:0] sext_ln203_23_fu_1787_p1;
wire   [21:0] select_ln41_fu_777_p3;
wire   [21:0] select_ln41_1_fu_792_p3;
wire   [21:0] select_ln41_2_fu_897_p3;
wire   [21:0] select_ln41_3_fu_905_p3;
wire   [21:0] select_ln41_4_fu_961_p3;
wire   [21:0] select_ln41_5_fu_969_p3;
wire   [21:0] select_ln41_6_fu_1025_p3;
wire   [21:0] select_ln41_7_fu_1033_p3;
wire   [21:0] select_ln41_8_fu_1089_p3;
wire   [21:0] select_ln41_9_fu_1097_p3;
wire   [21:0] shl_ln_fu_1119_p3;
wire   [21:0] shl_ln731_1_fu_1127_p3;
wire   [21:0] shl_ln731_2_fu_1163_p3;
wire   [21:0] shl_ln731_3_fu_1171_p3;
wire   [21:0] shl_ln731_4_fu_1199_p3;
wire   [21:0] shl_ln731_5_fu_1207_p3;
wire   [21:0] shl_ln731_6_fu_1235_p3;
wire   [21:0] shl_ln731_7_fu_1243_p3;
wire   [21:0] shl_ln731_8_fu_1271_p3;
wire   [21:0] shl_ln731_9_fu_1279_p3;
wire   [21:0] trunc_ln703_fu_1387_p1;
wire   [6:0] tmp_s_fu_673_p3;
wire   [4:0] tmp_1_fu_685_p3;
wire   [7:0] zext_ln37_1_fu_693_p1;
wire   [7:0] zext_ln37_fu_681_p1;
wire   [7:0] or_ln37_fu_708_p2;
wire   [7:0] tmp_3_fu_719_p3;
wire   [5:0] tmp_5_fu_731_p3;
wire   [8:0] zext_ln203_1_fu_739_p1;
wire   [8:0] zext_ln203_fu_727_p1;
wire   [8:0] add_ln203_7_fu_749_p2;
wire   [8:0] add_ln203_8_fu_760_p2;
wire   [0:0] icmp_ln41_fu_771_p2;
wire   [0:0] icmp_ln41_1_fu_786_p2;
wire   [7:0] add_ln37_1_fu_849_p2;
wire   [7:0] add_ln37_2_fu_859_p2;
wire   [8:0] add_ln203_9_fu_869_p2;
wire   [8:0] add_ln203_10_fu_879_p2;
wire   [7:0] add_ln37_3_fu_913_p2;
wire   [7:0] add_ln37_4_fu_923_p2;
wire   [8:0] add_ln203_11_fu_933_p2;
wire   [8:0] add_ln203_12_fu_943_p2;
wire   [7:0] add_ln37_5_fu_977_p2;
wire   [7:0] add_ln37_6_fu_987_p2;
wire   [8:0] add_ln203_13_fu_997_p2;
wire   [8:0] add_ln203_14_fu_1007_p2;
wire   [7:0] add_ln37_7_fu_1041_p2;
wire   [7:0] add_ln37_8_fu_1051_p2;
wire   [8:0] add_ln203_15_fu_1061_p2;
wire   [8:0] add_ln203_16_fu_1071_p2;
wire   [8:0] or_ln203_fu_1109_p2;
wire   [8:0] or_ln203_1_fu_1143_p2;
wire   [8:0] or_ln203_2_fu_1153_p2;
wire   [8:0] add_ln203_1_fu_1179_p2;
wire   [8:0] add_ln203_2_fu_1189_p2;
wire   [8:0] add_ln203_3_fu_1215_p2;
wire   [8:0] add_ln203_4_fu_1225_p2;
wire   [8:0] add_ln203_5_fu_1251_p2;
wire   [8:0] add_ln203_6_fu_1261_p2;
wire   [7:0] tmp_6_fu_1303_p3;
wire   [5:0] tmp_7_fu_1315_p3;
wire   [8:0] zext_ln203_8_fu_1323_p1;
wire   [8:0] zext_ln203_7_fu_1311_p1;
wire   [8:0] add_ln203_18_fu_1333_p2;
wire   [8:0] zext_ln1265_fu_1360_p1;
wire   [8:0] add_ln1265_fu_1364_p2;
wire   [35:0] grp_fu_1382_p0;
wire  signed [21:0] grp_fu_1382_p1;
wire   [21:0] grp_fu_1382_p2;
wire   [7:0] tmp_12_fu_1410_p3;
wire   [5:0] tmp_13_fu_1422_p3;
wire   [8:0] zext_ln203_17_fu_1430_p1;
wire   [8:0] zext_ln203_16_fu_1418_p1;
wire   [8:0] add_ln203_40_fu_1440_p2;
wire   [8:0] zext_ln1116_fu_1466_p1;
wire   [8:0] add_ln1116_fu_1470_p2;
wire   [8:0] add_ln1265_1_fu_1480_p2;
wire  signed [21:0] sext_ln1193_1_fu_1490_p0;
wire  signed [21:0] mul_ln1193_fu_1494_p0;
wire  signed [21:0] mul_ln1193_fu_1494_p1;
wire   [35:0] lhs_V_fu_1499_p3;
wire   [35:0] mul_ln1193_fu_1494_p2;
wire   [35:0] ret_V_fu_1507_p2;
wire   [6:0] tmp_8_fu_1536_p3;
wire   [4:0] tmp_9_fu_1548_p3;
wire   [7:0] zext_ln203_11_fu_1556_p1;
wire   [7:0] zext_ln203_10_fu_1544_p1;
wire   [7:0] tmp_10_fu_1566_p3;
wire   [5:0] tmp_11_fu_1578_p3;
wire   [8:0] zext_ln203_15_fu_1586_p1;
wire   [8:0] zext_ln203_14_fu_1574_p1;
wire   [8:0] add_ln203_29_fu_1596_p2;
wire   [8:0] add_ln203_30_fu_1607_p2;
wire   [7:0] or_ln203_3_fu_1622_p2;
wire   [8:0] add_ln203_31_fu_1632_p2;
wire   [8:0] add_ln203_32_fu_1642_p2;
wire   [7:0] add_ln203_20_fu_1652_p2;
wire   [7:0] add_ln203_21_fu_1662_p2;
wire   [8:0] add_ln203_33_fu_1672_p2;
wire   [8:0] add_ln203_34_fu_1682_p2;
wire   [7:0] add_ln203_22_fu_1692_p2;
wire   [7:0] add_ln203_23_fu_1702_p2;
wire   [8:0] add_ln203_35_fu_1712_p2;
wire   [8:0] add_ln203_36_fu_1722_p2;
wire   [7:0] add_ln203_24_fu_1732_p2;
wire   [7:0] add_ln203_25_fu_1742_p2;
wire   [8:0] add_ln203_37_fu_1752_p2;
wire   [8:0] add_ln203_38_fu_1762_p2;
wire   [7:0] add_ln203_26_fu_1772_p2;
wire   [7:0] add_ln203_27_fu_1782_p2;
reg    grp_fu_1382_ap_start;
wire    grp_fu_1382_ap_done;
wire    ap_CS_fsm_state66;
reg   [64:0] ap_NS_fsm;
wire    ap_block_pp1_stage1_subdone;
wire    ap_block_pp1_stage2_subdone;
wire    ap_block_pp1_stage3_subdone;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 65'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

inverse_aug_V #(
    .DataWidth( 22 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
aug_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(aug_V_address0),
    .ce0(aug_V_ce0),
    .we0(aug_V_we0),
    .d0(aug_V_d0),
    .q0(aug_V_q0),
    .address1(aug_V_address1),
    .ce1(aug_V_ce1),
    .we1(aug_V_we1),
    .d1(aug_V_d1),
    .q1(aug_V_q1)
);

inverse_sdiv_36nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 40 ),
    .din0_WIDTH( 36 ),
    .din1_WIDTH( 22 ),
    .dout_WIDTH( 22 ))
inverse_sdiv_36nsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_1382_ap_start),
    .done(grp_fu_1382_ap_done),
    .din0(grp_fu_1382_p0),
    .din1(grp_fu_1382_p1),
    .ce(1'b1),
    .dout(grp_fu_1382_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state60) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln47_fu_1287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((icmp_ln47_fu_1287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_594 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        i_0_reg_594 <= i_reg_1795;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_1_reg_605 <= 4'd0;
    end else if (((icmp_ln57_fu_1392_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state56))) begin
        i_1_reg_605 <= i_4_reg_1978;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln47_fu_1287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        i_2_reg_650 <= 4'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln69_reg_2069 == 1'd0))) begin
        i_2_reg_650 <= i_3_reg_2073;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        j_2_reg_617 <= j_reg_2007;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        j_2_reg_617 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_1348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        j_3_reg_628 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state58) & ((icmp_ln60_fu_1454_p2 == 1'd1) | (icmp_ln58_reg_2031 == 1'd1)))) begin
        j_3_reg_628 <= j_1_reg_2026;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        k_0_reg_639 <= k_reg_2053;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        k_0_reg_639 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln47_fu_1287_p2 == 1'd0))) begin
        add_ln203_17_reg_1988[8 : 2] <= add_ln203_17_fu_1327_p2[8 : 2];
        zext_ln203_6_reg_1983[3 : 0] <= zext_ln203_6_fu_1299_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln69_fu_1524_p2 == 1'd0))) begin
        add_ln203_19_reg_2078[7 : 1] <= add_ln203_19_fu_1560_p2[7 : 1];
        add_ln203_28_reg_2092[8 : 2] <= add_ln203_28_fu_1590_p2[8 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state56) & (icmp_ln57_fu_1392_p2 == 1'd0) & (icmp_ln58_fu_1404_p2 == 1'd0))) begin
        add_ln203_39_reg_2035[8 : 2] <= add_ln203_39_fu_1434_p2[8 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln34_fu_661_p2 == 1'd0))) begin
        add_ln203_reg_1822[8 : 2] <= add_ln203_fu_743_p2[8 : 2];
        add_ln37_reg_1800[7 : 1] <= add_ln37_fu_697_p2[7 : 1];
        icmp_ln41_2_reg_1844 <= icmp_ln41_2_fu_801_p2;
        icmp_ln41_3_reg_1849 <= icmp_ln41_3_fu_807_p2;
        icmp_ln41_4_reg_1854 <= icmp_ln41_4_fu_813_p2;
        icmp_ln41_5_reg_1859 <= icmp_ln41_5_fu_819_p2;
        icmp_ln41_6_reg_1864 <= icmp_ln41_6_fu_825_p2;
        icmp_ln41_7_reg_1869 <= icmp_ln41_7_fu_831_p2;
        icmp_ln41_8_reg_1874 <= icmp_ln41_8_fu_837_p2;
        icmp_ln41_9_reg_1879 <= icmp_ln41_9_fu_843_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln52_fu_1348_p2 == 1'd0))) begin
        aug_V_addr_2_reg_2012 <= zext_ln1265_1_fu_1369_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state58) & (icmp_ln60_fu_1454_p2 == 1'd0) & (icmp_ln58_reg_2031 == 1'd0))) begin
        aug_V_addr_7_reg_2063 <= zext_ln1265_2_fu_1485_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_3_reg_2073 <= i_3_fu_1530_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_4_reg_1978 <= i_4_fu_1293_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_1795 <= i_fu_667_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state56) & (icmp_ln57_fu_1392_p2 == 1'd0))) begin
        icmp_ln58_reg_2031 <= icmp_ln58_fu_1404_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln69_reg_2069 <= icmp_ln69_fu_1524_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        j_1_reg_2026 <= j_1_fu_1398_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        j_reg_2007 <= j_fu_1354_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state58) & (icmp_ln58_reg_2031 == 1'd0))) begin
        k_reg_2053 <= k_fu_1460_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        sext_ln1148_reg_1999 <= sext_ln1148_fu_1344_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        sext_ln1193_reg_2045 <= sext_ln1193_fu_1450_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        trunc_ln731_1_reg_1899 <= trunc_ln731_1_fu_893_p1;
        trunc_ln731_reg_1894 <= trunc_ln731_fu_889_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        trunc_ln731_2_reg_1914 <= trunc_ln731_2_fu_953_p1;
        trunc_ln731_3_reg_1919 <= trunc_ln731_3_fu_957_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        trunc_ln731_4_reg_1934 <= trunc_ln731_4_fu_1017_p1;
        trunc_ln731_5_reg_1939 <= trunc_ln731_5_fu_1021_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        trunc_ln731_6_reg_1954 <= trunc_ln731_6_fu_1081_p1;
        trunc_ln731_7_reg_1959 <= trunc_ln731_7_fu_1085_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        trunc_ln731_8_reg_1964 <= trunc_ln731_8_fu_1135_p1;
        trunc_ln731_9_reg_1969 <= trunc_ln731_9_fu_1139_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        A_address0 = sext_ln37_6_fu_1046_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        A_address0 = sext_ln37_4_fu_982_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_address0 = sext_ln37_2_fu_918_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        A_address0 = sext_ln37_fu_854_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        A_address0 = zext_ln37_2_fu_703_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        A_address1 = sext_ln37_7_fu_1056_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        A_address1 = sext_ln37_5_fu_992_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_address1 = sext_ln37_3_fu_928_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        A_address1 = sext_ln37_1_fu_864_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        A_address1 = zext_ln37_3_fu_714_p1;
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        B_V_address0 = sext_ln203_22_fu_1777_p1;
    end else if (((1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        B_V_address0 = sext_ln203_20_fu_1737_p1;
    end else if (((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        B_V_address0 = sext_ln203_18_fu_1697_p1;
    end else if (((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        B_V_address0 = sext_ln203_16_fu_1657_p1;
    end else if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        B_V_address0 = zext_ln203_12_fu_1618_p1;
    end else begin
        B_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        B_V_address1 = sext_ln203_23_fu_1787_p1;
    end else if (((1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        B_V_address1 = sext_ln203_21_fu_1747_p1;
    end else if (((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        B_V_address1 = sext_ln203_19_fu_1707_p1;
    end else if (((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        B_V_address1 = sext_ln203_17_fu_1667_p1;
    end else if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        B_V_address1 = zext_ln203_13_fu_1627_p1;
    end else begin
        B_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        B_V_ce0 = 1'b1;
    end else begin
        B_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        B_V_ce1 = 1'b1;
    end else begin
        B_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln69_reg_2069 == 1'd0)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln69_reg_2069 == 1'd0)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln69_reg_2069 == 1'd0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln69_reg_2069 == 1'd0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln69_reg_2069 == 1'd0)))) begin
        B_V_we0 = 1'b1;
    end else begin
        B_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln69_reg_2069 == 1'd0)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln69_reg_2069 == 1'd0)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln69_reg_2069 == 1'd0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln69_reg_2069 == 1'd0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln69_reg_2069 == 1'd0)))) begin
        B_V_we1 = 1'b1;
    end else begin
        B_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln69_fu_1524_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state60 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state60 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln69_reg_2069 == 1'd0))) begin
        ap_phi_mux_i_2_phi_fu_654_p4 = i_3_reg_2073;
    end else begin
        ap_phi_mux_i_2_phi_fu_654_p4 = i_2_reg_650;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        aug_V_address0 = sext_ln203_33_fu_1767_p1;
    end else if (((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        aug_V_address0 = sext_ln203_31_fu_1727_p1;
    end else if (((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        aug_V_address0 = sext_ln203_29_fu_1687_p1;
    end else if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        aug_V_address0 = sext_ln203_27_fu_1647_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        aug_V_address0 = sext_ln203_25_fu_1613_p1;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        aug_V_address0 = aug_V_addr_7_reg_2063;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        aug_V_address0 = zext_ln1116_1_fu_1475_p1;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        aug_V_address0 = aug_V_addr_2_reg_2012;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        aug_V_address0 = zext_ln203_9_fu_1339_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        aug_V_address0 = sext_ln203_4_fu_1256_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        aug_V_address0 = sext_ln203_2_fu_1220_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        aug_V_address0 = sext_ln203_fu_1184_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        aug_V_address0 = zext_ln203_4_fu_1148_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        aug_V_address0 = zext_ln203_2_fu_1105_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        aug_V_address0 = sext_ln203_14_fu_1066_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        aug_V_address0 = sext_ln203_12_fu_1002_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        aug_V_address0 = sext_ln203_10_fu_938_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        aug_V_address0 = sext_ln203_8_fu_874_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        aug_V_address0 = sext_ln203_6_fu_755_p1;
    end else begin
        aug_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        aug_V_address1 = sext_ln203_32_fu_1757_p1;
    end else if (((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        aug_V_address1 = sext_ln203_30_fu_1717_p1;
    end else if (((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        aug_V_address1 = sext_ln203_28_fu_1677_p1;
    end else if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        aug_V_address1 = sext_ln203_26_fu_1637_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        aug_V_address1 = sext_ln203_24_fu_1602_p1;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        aug_V_address1 = zext_ln1265_2_fu_1485_p1;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        aug_V_address1 = zext_ln203_18_fu_1445_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        aug_V_address1 = zext_ln1265_1_fu_1369_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        aug_V_address1 = sext_ln203_5_fu_1266_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        aug_V_address1 = sext_ln203_3_fu_1230_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        aug_V_address1 = sext_ln203_1_fu_1194_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        aug_V_address1 = zext_ln203_5_fu_1158_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        aug_V_address1 = zext_ln203_3_fu_1114_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        aug_V_address1 = sext_ln203_15_fu_1076_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        aug_V_address1 = sext_ln203_13_fu_1012_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        aug_V_address1 = sext_ln203_11_fu_948_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        aug_V_address1 = sext_ln203_9_fu_884_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        aug_V_address1 = sext_ln203_7_fu_766_p1;
    end else begin
        aug_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        aug_V_ce0 = 1'b1;
    end else begin
        aug_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        aug_V_ce1 = 1'b1;
    end else begin
        aug_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        aug_V_d0 = {{ret_V_fu_1507_p2[35:14]}};
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        aug_V_d0 = trunc_ln703_fu_1387_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        aug_V_d0 = shl_ln731_8_fu_1271_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        aug_V_d0 = shl_ln731_6_fu_1235_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        aug_V_d0 = shl_ln731_4_fu_1199_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        aug_V_d0 = shl_ln731_2_fu_1163_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        aug_V_d0 = shl_ln_fu_1119_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        aug_V_d0 = select_ln41_8_fu_1089_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        aug_V_d0 = select_ln41_6_fu_1025_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        aug_V_d0 = select_ln41_4_fu_961_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        aug_V_d0 = select_ln41_2_fu_897_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        aug_V_d0 = select_ln41_fu_777_p3;
    end else begin
        aug_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        aug_V_d1 = shl_ln731_9_fu_1279_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        aug_V_d1 = shl_ln731_7_fu_1243_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        aug_V_d1 = shl_ln731_5_fu_1207_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        aug_V_d1 = shl_ln731_3_fu_1171_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        aug_V_d1 = shl_ln731_1_fu_1127_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        aug_V_d1 = select_ln41_9_fu_1097_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        aug_V_d1 = select_ln41_7_fu_1033_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        aug_V_d1 = select_ln41_5_fu_969_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        aug_V_d1 = select_ln41_3_fu_905_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        aug_V_d1 = select_ln41_1_fu_792_p3;
    end else begin
        aug_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln34_fu_661_p2 == 1'd0)))) begin
        aug_V_we0 = 1'b1;
    end else begin
        aug_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln34_fu_661_p2 == 1'd0)))) begin
        aug_V_we1 = 1'b1;
    end else begin
        aug_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_1382_ap_start = 1'b1;
    end else begin
        grp_fu_1382_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln34_fu_661_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((icmp_ln47_fu_1287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((icmp_ln52_fu_1348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state56 : begin
            if (((icmp_ln57_fu_1392_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state56))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else if (((icmp_ln58_fu_1404_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state56) & (icmp_ln57_fu_1392_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            if (((1'b1 == ap_CS_fsm_state58) & ((icmp_ln60_fu_1454_p2 == 1'd1) | (icmp_ln58_reg_2031 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln69_fu_1524_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln69_fu_1524_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((1'b0 == ap_block_pp1_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_pp1_stage4 : begin
            if ((1'b0 == ap_block_pp1_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_V_d0 = aug_V_q1;

assign B_V_d1 = aug_V_q0;

assign add_ln1116_fu_1470_p2 = (zext_ln1116_fu_1466_p1 + add_ln203_17_reg_1988);

assign add_ln1265_1_fu_1480_p2 = (zext_ln1116_fu_1466_p1 + add_ln203_39_reg_2035);

assign add_ln1265_fu_1364_p2 = (add_ln203_17_reg_1988 + zext_ln1265_fu_1360_p1);

assign add_ln203_10_fu_879_p2 = (add_ln203_reg_1822 + 9'd13);

assign add_ln203_11_fu_933_p2 = (add_ln203_reg_1822 + 9'd14);

assign add_ln203_12_fu_943_p2 = (add_ln203_reg_1822 + 9'd15);

assign add_ln203_13_fu_997_p2 = (add_ln203_reg_1822 + 9'd16);

assign add_ln203_14_fu_1007_p2 = (add_ln203_reg_1822 + 9'd17);

assign add_ln203_15_fu_1061_p2 = (add_ln203_reg_1822 + 9'd18);

assign add_ln203_16_fu_1071_p2 = (add_ln203_reg_1822 + 9'd19);

assign add_ln203_17_fu_1327_p2 = (zext_ln203_8_fu_1323_p1 + zext_ln203_7_fu_1311_p1);

assign add_ln203_18_fu_1333_p2 = (add_ln203_17_fu_1327_p2 + zext_ln203_6_fu_1299_p1);

assign add_ln203_19_fu_1560_p2 = (zext_ln203_11_fu_1556_p1 + zext_ln203_10_fu_1544_p1);

assign add_ln203_1_fu_1179_p2 = (add_ln203_reg_1822 + 9'd4);

assign add_ln203_20_fu_1652_p2 = (add_ln203_19_reg_2078 + 8'd2);

assign add_ln203_21_fu_1662_p2 = (add_ln203_19_reg_2078 + 8'd3);

assign add_ln203_22_fu_1692_p2 = (add_ln203_19_reg_2078 + 8'd4);

assign add_ln203_23_fu_1702_p2 = (add_ln203_19_reg_2078 + 8'd5);

assign add_ln203_24_fu_1732_p2 = (add_ln203_19_reg_2078 + 8'd6);

assign add_ln203_25_fu_1742_p2 = (add_ln203_19_reg_2078 + 8'd7);

assign add_ln203_26_fu_1772_p2 = (add_ln203_19_reg_2078 + 8'd8);

assign add_ln203_27_fu_1782_p2 = (add_ln203_19_reg_2078 + 8'd9);

assign add_ln203_28_fu_1590_p2 = (zext_ln203_15_fu_1586_p1 + zext_ln203_14_fu_1574_p1);

assign add_ln203_29_fu_1596_p2 = (add_ln203_28_fu_1590_p2 + 9'd10);

assign add_ln203_2_fu_1189_p2 = (add_ln203_reg_1822 + 9'd5);

assign add_ln203_30_fu_1607_p2 = (add_ln203_28_fu_1590_p2 + 9'd11);

assign add_ln203_31_fu_1632_p2 = (add_ln203_28_reg_2092 + 9'd12);

assign add_ln203_32_fu_1642_p2 = (add_ln203_28_reg_2092 + 9'd13);

assign add_ln203_33_fu_1672_p2 = (add_ln203_28_reg_2092 + 9'd14);

assign add_ln203_34_fu_1682_p2 = (add_ln203_28_reg_2092 + 9'd15);

assign add_ln203_35_fu_1712_p2 = (add_ln203_28_reg_2092 + 9'd16);

assign add_ln203_36_fu_1722_p2 = (add_ln203_28_reg_2092 + 9'd17);

assign add_ln203_37_fu_1752_p2 = (add_ln203_28_reg_2092 + 9'd18);

assign add_ln203_38_fu_1762_p2 = (add_ln203_28_reg_2092 + 9'd19);

assign add_ln203_39_fu_1434_p2 = (zext_ln203_17_fu_1430_p1 + zext_ln203_16_fu_1418_p1);

assign add_ln203_3_fu_1215_p2 = (add_ln203_reg_1822 + 9'd6);

assign add_ln203_40_fu_1440_p2 = (add_ln203_39_fu_1434_p2 + zext_ln203_6_reg_1983);

assign add_ln203_4_fu_1225_p2 = (add_ln203_reg_1822 + 9'd7);

assign add_ln203_5_fu_1251_p2 = (add_ln203_reg_1822 + 9'd8);

assign add_ln203_6_fu_1261_p2 = (add_ln203_reg_1822 + 9'd9);

assign add_ln203_7_fu_749_p2 = (add_ln203_fu_743_p2 + 9'd10);

assign add_ln203_8_fu_760_p2 = (add_ln203_fu_743_p2 + 9'd11);

assign add_ln203_9_fu_869_p2 = (add_ln203_reg_1822 + 9'd12);

assign add_ln203_fu_743_p2 = (zext_ln203_1_fu_739_p1 + zext_ln203_fu_727_p1);

assign add_ln37_1_fu_849_p2 = (add_ln37_reg_1800 + 8'd2);

assign add_ln37_2_fu_859_p2 = (add_ln37_reg_1800 + 8'd3);

assign add_ln37_3_fu_913_p2 = (add_ln37_reg_1800 + 8'd4);

assign add_ln37_4_fu_923_p2 = (add_ln37_reg_1800 + 8'd5);

assign add_ln37_5_fu_977_p2 = (add_ln37_reg_1800 + 8'd6);

assign add_ln37_6_fu_987_p2 = (add_ln37_reg_1800 + 8'd7);

assign add_ln37_7_fu_1041_p2 = (add_ln37_reg_1800 + 8'd8);

assign add_ln37_8_fu_1051_p2 = (add_ln37_reg_1800 + 8'd9);

assign add_ln37_fu_697_p2 = (zext_ln37_1_fu_693_p1 + zext_ln37_fu_681_p1);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_pp1_stage4 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state60_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp1_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp1_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp1_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign grp_fu_1382_p0 = {{aug_V_q1}, {14'd0}};

assign grp_fu_1382_p1 = sext_ln1148_reg_1999;

assign i_3_fu_1530_p2 = (ap_phi_mux_i_2_phi_fu_654_p4 + 4'd1);

assign i_4_fu_1293_p2 = (i_1_reg_605 + 4'd1);

assign i_fu_667_p2 = (i_0_reg_594 + 4'd1);

assign icmp_ln34_fu_661_p2 = ((i_0_reg_594 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln41_1_fu_786_p2 = ((i_0_reg_594 == 4'd1) ? 1'b1 : 1'b0);

assign icmp_ln41_2_fu_801_p2 = ((i_0_reg_594 == 4'd2) ? 1'b1 : 1'b0);

assign icmp_ln41_3_fu_807_p2 = ((i_0_reg_594 == 4'd3) ? 1'b1 : 1'b0);

assign icmp_ln41_4_fu_813_p2 = ((i_0_reg_594 == 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln41_5_fu_819_p2 = ((i_0_reg_594 == 4'd5) ? 1'b1 : 1'b0);

assign icmp_ln41_6_fu_825_p2 = ((i_0_reg_594 == 4'd6) ? 1'b1 : 1'b0);

assign icmp_ln41_7_fu_831_p2 = ((i_0_reg_594 == 4'd7) ? 1'b1 : 1'b0);

assign icmp_ln41_8_fu_837_p2 = ((i_0_reg_594 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln41_9_fu_843_p2 = ((i_0_reg_594 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_771_p2 = ((i_0_reg_594 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_1287_p2 = ((i_1_reg_605 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_1348_p2 = ((j_2_reg_617 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_1392_p2 = ((j_3_reg_628 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_1404_p2 = ((i_1_reg_605 == j_3_reg_628) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_1454_p2 = ((k_0_reg_639 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_1524_p2 = ((ap_phi_mux_i_2_phi_fu_654_p4 == 4'd10) ? 1'b1 : 1'b0);

assign j_1_fu_1398_p2 = (j_3_reg_628 + 4'd1);

assign j_fu_1354_p2 = (j_2_reg_617 + 5'd1);

assign k_fu_1460_p2 = (k_0_reg_639 + 5'd1);

assign lhs_V_fu_1499_p3 = {{aug_V_q1}, {14'd0}};

assign mul_ln1193_fu_1494_p0 = sext_ln1193_reg_2045;

assign mul_ln1193_fu_1494_p1 = sext_ln1193_1_fu_1490_p0;

assign mul_ln1193_fu_1494_p2 = ($signed(mul_ln1193_fu_1494_p0) * $signed(mul_ln1193_fu_1494_p1));

assign or_ln203_1_fu_1143_p2 = (9'd2 | add_ln203_reg_1822);

assign or_ln203_2_fu_1153_p2 = (9'd3 | add_ln203_reg_1822);

assign or_ln203_3_fu_1622_p2 = (8'd1 | add_ln203_19_reg_2078);

assign or_ln203_fu_1109_p2 = (9'd1 | add_ln203_reg_1822);

assign or_ln37_fu_708_p2 = (8'd1 | add_ln37_fu_697_p2);

assign ret_V_fu_1507_p2 = (lhs_V_fu_1499_p3 - mul_ln1193_fu_1494_p2);

assign select_ln41_1_fu_792_p3 = ((icmp_ln41_1_fu_786_p2[0:0] === 1'b1) ? 22'd16384 : 22'd0);

assign select_ln41_2_fu_897_p3 = ((icmp_ln41_2_reg_1844[0:0] === 1'b1) ? 22'd16384 : 22'd0);

assign select_ln41_3_fu_905_p3 = ((icmp_ln41_3_reg_1849[0:0] === 1'b1) ? 22'd16384 : 22'd0);

assign select_ln41_4_fu_961_p3 = ((icmp_ln41_4_reg_1854[0:0] === 1'b1) ? 22'd16384 : 22'd0);

assign select_ln41_5_fu_969_p3 = ((icmp_ln41_5_reg_1859[0:0] === 1'b1) ? 22'd16384 : 22'd0);

assign select_ln41_6_fu_1025_p3 = ((icmp_ln41_6_reg_1864[0:0] === 1'b1) ? 22'd16384 : 22'd0);

assign select_ln41_7_fu_1033_p3 = ((icmp_ln41_7_reg_1869[0:0] === 1'b1) ? 22'd16384 : 22'd0);

assign select_ln41_8_fu_1089_p3 = ((icmp_ln41_8_reg_1874[0:0] === 1'b1) ? 22'd16384 : 22'd0);

assign select_ln41_9_fu_1097_p3 = ((icmp_ln41_9_reg_1879[0:0] === 1'b1) ? 22'd16384 : 22'd0);

assign select_ln41_fu_777_p3 = ((icmp_ln41_fu_771_p2[0:0] === 1'b1) ? 22'd16384 : 22'd0);

assign sext_ln1148_fu_1344_p1 = $signed(aug_V_q0);

assign sext_ln1193_1_fu_1490_p0 = aug_V_q0;

assign sext_ln1193_fu_1450_p1 = $signed(aug_V_q1);

assign sext_ln203_10_fu_938_p1 = $signed(add_ln203_11_fu_933_p2);

assign sext_ln203_11_fu_948_p1 = $signed(add_ln203_12_fu_943_p2);

assign sext_ln203_12_fu_1002_p1 = $signed(add_ln203_13_fu_997_p2);

assign sext_ln203_13_fu_1012_p1 = $signed(add_ln203_14_fu_1007_p2);

assign sext_ln203_14_fu_1066_p1 = $signed(add_ln203_15_fu_1061_p2);

assign sext_ln203_15_fu_1076_p1 = $signed(add_ln203_16_fu_1071_p2);

assign sext_ln203_16_fu_1657_p1 = $signed(add_ln203_20_fu_1652_p2);

assign sext_ln203_17_fu_1667_p1 = $signed(add_ln203_21_fu_1662_p2);

assign sext_ln203_18_fu_1697_p1 = $signed(add_ln203_22_fu_1692_p2);

assign sext_ln203_19_fu_1707_p1 = $signed(add_ln203_23_fu_1702_p2);

assign sext_ln203_1_fu_1194_p1 = $signed(add_ln203_2_fu_1189_p2);

assign sext_ln203_20_fu_1737_p1 = $signed(add_ln203_24_fu_1732_p2);

assign sext_ln203_21_fu_1747_p1 = $signed(add_ln203_25_fu_1742_p2);

assign sext_ln203_22_fu_1777_p1 = $signed(add_ln203_26_fu_1772_p2);

assign sext_ln203_23_fu_1787_p1 = $signed(add_ln203_27_fu_1782_p2);

assign sext_ln203_24_fu_1602_p1 = $signed(add_ln203_29_fu_1596_p2);

assign sext_ln203_25_fu_1613_p1 = $signed(add_ln203_30_fu_1607_p2);

assign sext_ln203_26_fu_1637_p1 = $signed(add_ln203_31_fu_1632_p2);

assign sext_ln203_27_fu_1647_p1 = $signed(add_ln203_32_fu_1642_p2);

assign sext_ln203_28_fu_1677_p1 = $signed(add_ln203_33_fu_1672_p2);

assign sext_ln203_29_fu_1687_p1 = $signed(add_ln203_34_fu_1682_p2);

assign sext_ln203_2_fu_1220_p1 = $signed(add_ln203_3_fu_1215_p2);

assign sext_ln203_30_fu_1717_p1 = $signed(add_ln203_35_fu_1712_p2);

assign sext_ln203_31_fu_1727_p1 = $signed(add_ln203_36_fu_1722_p2);

assign sext_ln203_32_fu_1757_p1 = $signed(add_ln203_37_fu_1752_p2);

assign sext_ln203_33_fu_1767_p1 = $signed(add_ln203_38_fu_1762_p2);

assign sext_ln203_3_fu_1230_p1 = $signed(add_ln203_4_fu_1225_p2);

assign sext_ln203_4_fu_1256_p1 = $signed(add_ln203_5_fu_1251_p2);

assign sext_ln203_5_fu_1266_p1 = $signed(add_ln203_6_fu_1261_p2);

assign sext_ln203_6_fu_755_p1 = $signed(add_ln203_7_fu_749_p2);

assign sext_ln203_7_fu_766_p1 = $signed(add_ln203_8_fu_760_p2);

assign sext_ln203_8_fu_874_p1 = $signed(add_ln203_9_fu_869_p2);

assign sext_ln203_9_fu_884_p1 = $signed(add_ln203_10_fu_879_p2);

assign sext_ln203_fu_1184_p1 = $signed(add_ln203_1_fu_1179_p2);

assign sext_ln37_1_fu_864_p1 = $signed(add_ln37_2_fu_859_p2);

assign sext_ln37_2_fu_918_p1 = $signed(add_ln37_3_fu_913_p2);

assign sext_ln37_3_fu_928_p1 = $signed(add_ln37_4_fu_923_p2);

assign sext_ln37_4_fu_982_p1 = $signed(add_ln37_5_fu_977_p2);

assign sext_ln37_5_fu_992_p1 = $signed(add_ln37_6_fu_987_p2);

assign sext_ln37_6_fu_1046_p1 = $signed(add_ln37_7_fu_1041_p2);

assign sext_ln37_7_fu_1056_p1 = $signed(add_ln37_8_fu_1051_p2);

assign sext_ln37_fu_854_p1 = $signed(add_ln37_1_fu_849_p2);

assign shl_ln731_1_fu_1127_p3 = {{trunc_ln731_1_reg_1899}, {14'd0}};

assign shl_ln731_2_fu_1163_p3 = {{trunc_ln731_2_reg_1914}, {14'd0}};

assign shl_ln731_3_fu_1171_p3 = {{trunc_ln731_3_reg_1919}, {14'd0}};

assign shl_ln731_4_fu_1199_p3 = {{trunc_ln731_4_reg_1934}, {14'd0}};

assign shl_ln731_5_fu_1207_p3 = {{trunc_ln731_5_reg_1939}, {14'd0}};

assign shl_ln731_6_fu_1235_p3 = {{trunc_ln731_6_reg_1954}, {14'd0}};

assign shl_ln731_7_fu_1243_p3 = {{trunc_ln731_7_reg_1959}, {14'd0}};

assign shl_ln731_8_fu_1271_p3 = {{trunc_ln731_8_reg_1964}, {14'd0}};

assign shl_ln731_9_fu_1279_p3 = {{trunc_ln731_9_reg_1969}, {14'd0}};

assign shl_ln_fu_1119_p3 = {{trunc_ln731_reg_1894}, {14'd0}};

assign tmp_10_fu_1566_p3 = {{ap_phi_mux_i_2_phi_fu_654_p4}, {4'd0}};

assign tmp_11_fu_1578_p3 = {{ap_phi_mux_i_2_phi_fu_654_p4}, {2'd0}};

assign tmp_12_fu_1410_p3 = {{j_3_reg_628}, {4'd0}};

assign tmp_13_fu_1422_p3 = {{j_3_reg_628}, {2'd0}};

assign tmp_1_fu_685_p3 = {{i_0_reg_594}, {1'd0}};

assign tmp_3_fu_719_p3 = {{i_0_reg_594}, {4'd0}};

assign tmp_5_fu_731_p3 = {{i_0_reg_594}, {2'd0}};

assign tmp_6_fu_1303_p3 = {{i_1_reg_605}, {4'd0}};

assign tmp_7_fu_1315_p3 = {{i_1_reg_605}, {2'd0}};

assign tmp_8_fu_1536_p3 = {{ap_phi_mux_i_2_phi_fu_654_p4}, {3'd0}};

assign tmp_9_fu_1548_p3 = {{ap_phi_mux_i_2_phi_fu_654_p4}, {1'd0}};

assign tmp_s_fu_673_p3 = {{i_0_reg_594}, {3'd0}};

assign trunc_ln703_fu_1387_p1 = grp_fu_1382_p2[21:0];

assign trunc_ln731_1_fu_893_p1 = A_q1[7:0];

assign trunc_ln731_2_fu_953_p1 = A_q0[7:0];

assign trunc_ln731_3_fu_957_p1 = A_q1[7:0];

assign trunc_ln731_4_fu_1017_p1 = A_q0[7:0];

assign trunc_ln731_5_fu_1021_p1 = A_q1[7:0];

assign trunc_ln731_6_fu_1081_p1 = A_q0[7:0];

assign trunc_ln731_7_fu_1085_p1 = A_q1[7:0];

assign trunc_ln731_8_fu_1135_p1 = A_q0[7:0];

assign trunc_ln731_9_fu_1139_p1 = A_q1[7:0];

assign trunc_ln731_fu_889_p1 = A_q0[7:0];

assign zext_ln1116_1_fu_1475_p1 = add_ln1116_fu_1470_p2;

assign zext_ln1116_fu_1466_p1 = k_0_reg_639;

assign zext_ln1265_1_fu_1369_p1 = add_ln1265_fu_1364_p2;

assign zext_ln1265_2_fu_1485_p1 = add_ln1265_1_fu_1480_p2;

assign zext_ln1265_fu_1360_p1 = j_2_reg_617;

assign zext_ln203_10_fu_1544_p1 = tmp_8_fu_1536_p3;

assign zext_ln203_11_fu_1556_p1 = tmp_9_fu_1548_p3;

assign zext_ln203_12_fu_1618_p1 = add_ln203_19_reg_2078;

assign zext_ln203_13_fu_1627_p1 = or_ln203_3_fu_1622_p2;

assign zext_ln203_14_fu_1574_p1 = tmp_10_fu_1566_p3;

assign zext_ln203_15_fu_1586_p1 = tmp_11_fu_1578_p3;

assign zext_ln203_16_fu_1418_p1 = tmp_12_fu_1410_p3;

assign zext_ln203_17_fu_1430_p1 = tmp_13_fu_1422_p3;

assign zext_ln203_18_fu_1445_p1 = add_ln203_40_fu_1440_p2;

assign zext_ln203_1_fu_739_p1 = tmp_5_fu_731_p3;

assign zext_ln203_2_fu_1105_p1 = add_ln203_reg_1822;

assign zext_ln203_3_fu_1114_p1 = or_ln203_fu_1109_p2;

assign zext_ln203_4_fu_1148_p1 = or_ln203_1_fu_1143_p2;

assign zext_ln203_5_fu_1158_p1 = or_ln203_2_fu_1153_p2;

assign zext_ln203_6_fu_1299_p1 = i_1_reg_605;

assign zext_ln203_7_fu_1311_p1 = tmp_6_fu_1303_p3;

assign zext_ln203_8_fu_1323_p1 = tmp_7_fu_1315_p3;

assign zext_ln203_9_fu_1339_p1 = add_ln203_18_fu_1333_p2;

assign zext_ln203_fu_727_p1 = tmp_3_fu_719_p3;

assign zext_ln37_1_fu_693_p1 = tmp_1_fu_685_p3;

assign zext_ln37_2_fu_703_p1 = add_ln37_fu_697_p2;

assign zext_ln37_3_fu_714_p1 = or_ln37_fu_708_p2;

assign zext_ln37_fu_681_p1 = tmp_s_fu_673_p3;

always @ (posedge ap_clk) begin
    add_ln37_reg_1800[0] <= 1'b0;
    add_ln203_reg_1822[1:0] <= 2'b00;
    zext_ln203_6_reg_1983[8:4] <= 5'b00000;
    add_ln203_17_reg_1988[1:0] <= 2'b00;
    add_ln203_39_reg_2035[1:0] <= 2'b00;
    add_ln203_19_reg_2078[0] <= 1'b0;
    add_ln203_28_reg_2092[1:0] <= 2'b00;
end

endmodule //inverse
